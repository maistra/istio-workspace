// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// test/cmd/test-service/assets/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdf\x73\xe3\xb6\x11\x7e\xf7\x5f\xb1\x61\x66\x62\x39\x15\x49\x49\xfe\x75\x56\x49\x4d\x1a\xe7\xda\x49\xa7\x9d\x4b\xe2\xbb\x9b\xf4\x32\x9e\x06\x22\xd7\x12\x6c\x10\x60\x01\x90\x92\xc7\xa3\xff\xbd\x03\x80\xa4\x48\x4a\x67\xf9\xae\x2f\xed\x4d\x5f\xce\xe0\x62\x77\xb1\xdf\x07\xe0\x5b\xe8\xa2\xaf\x7e\x78\x73\xfd\xf6\x1f\x3f\xbd\x86\xa5\xce\xd8\xec\x28\x32\x7f\x80\x11\xbe\x88\x3d\xe4\xde\xec\x08\x20\x5a\x22\x49\xed\x20\x43\x4d\x20\x59\x12\xa9\x50\xc7\x5e\xa1\xef\xfc\x57\xde\x76\x62\xa9\x75\xee\xe3\xbf\x0a\x5a\xc6\xde\xaf\xfe\xbb\x3f\xf9\xd7\x22\xcb\x89\xa6\x73\x86\x1e\x24\x82\x6b\xe4\x3a\xf6\x7e\x7c\x1d\x63\xba\xc0\x56\x1c\x27\x19\xc6\x5e\x49\x71\x95\x0b\xa9\x5b\xae\x2b\x9a\xea\x65\x9c\x62\x49\x13\xf4\xed\xc7\x10\x28\xa7\x9a\x12\xe6\xab\x84\x30\x8c\xc7\x3b\x69\x52\x54\x89\xa4\xb9\xa6\x82\xb7\x32\x51\xa5\xa9\xf0\x57\x42\x3e\xa8\x9c\x24\x08\x6f\x51\x69\xb8\x41\x69\x32\x83\xa2\x59\xce\x10\xde\xfd\xe8\xcd\x8e\x4c\x36\x4d\x35\xc3\x59\x2f\x64\xda\x89\x89\x42\xe7\x64\xfd\x19\xe5\x0f\x20\x91\xc5\x9e\xd2\x8f\x0c\xd5\x12\x51\x7b\xb0\x94\x78\x17\x7b\x86\x13\x35\x0d\xc3\x24\xe5\xf7\x2a\x48\x98\x28\xd2\x3b\x46\x24\x06\x89\xc8\x42\x72\x4f\xd6\x21\xa3\x73\x15\xce\x0b\x96\x91\x70\x14\x5c\x06\xe7\x61\xa2\xaa\xef\x20\x51\xca\x03\xca\x35\x2e\x24\xd5\x8f\xb1\xa7\x96\x64\x72\x7e\xe1\x17\xf7\xaf\xc3\x0f\xef\xbe\xbf\xb8\xfe\xfb\x87\xec\xf1\xaf\x37\x8b\x9f\xef\x7f\xfd\xcb\xf5\x9f\xcf\xd4\x2f\xbf\x70\x7c\x43\xb3\x9f\x73\xf6\xfd\xfb\xbf\x15\xaf\xde\xbc\x3b\x5f\xc5\x1e\x24\x52\x28\x25\x24\x5d\x50\x1e\x7b\x84\x0b\xfe\x98\x89\x42\x79\x10\x5a\xe6\x1c\x59\xa0\x64\xb2\xad\xb5\x2c\xf0\x5e\x05\x42\x2e\xc2\x7b\x65\x3e\x82\x7b\xe5\xcd\xa2\xd0\xb9\x7e\x34\xaa\xe0\xf9\xc3\xc2\xc2\x2a\x0b\x5c\x7f\x37\x09\x46\xc1\xe8\x93\xc2\xc8\x9a\x0a\xf5\xdd\x28\x18\x5f\x05\xa3\x30\xa5\x4a\x3b\x4b\x90\x51\xde\xab\xc0\xe6\x32\x54\x9b\xac\x00\x29\x2d\xe1\xc9\x8e\x00\xd6\x73\x21\x53\x94\x53\x18\xe7\x6b\x50\x82\xd1\x14\xbe\x1e\x8d\x46\x76\x76\x63\xe2\xc2\x26\x30\x0a\x9b\x73\x3d\x17\xe9\xa3\xcb\x15\x99\x64\x34\x8d\x3d\x92\xe7\xde\xac\x4a\x0a\x10\x71\x52\x42\xc2\x88\x52\xb1\xc7\x49\x39\x27\xb2\x35\xd9\xc4\x75\x1c\xfc\xb9\x24\x3c\xed\xb9\x01\x44\xa4\xe7\x46\x35\x66\xfd\xd3\xb2\xa0\x7a\x59\xcc\x2d\x2b\x19\xa1\x4a\x4b\x12\xf6\x8e\xe3\x4e\x5e\x80\xfe\x19\xf7\x41\x9b\x13\xab\xdc\x89\xed\x97\x11\x92\x1e\x80\x30\xa5\xa5\xa5\xf6\x59\x50\x19\xf2\x62\x17\xd3\xae\x1f\xee\x81\xbe\xd7\xd1\xc2\xdf\xf5\xec\xfa\x2a\x64\x98\xe8\xbd\x6e\xe6\x28\xd8\x59\x28\xfd\x4c\xa4\xf6\x16\xa2\x52\xe6\xfa\xef\x77\x07\x88\x84\x95\x07\x48\xa9\x22\x73\x86\xe9\xec\xc6\x25\xa8\xe2\xa2\xd0\xcd\x1f\x0a\x2f\xfd\x3b\x21\x9b\xd5\x80\xf2\x3a\x81\xf2\xa0\xf4\xe7\x94\xa7\xd3\x92\xb0\x02\x1b\x97\xa0\x90\xcc\x9b\x3d\x3d\xd5\x9f\x46\xb0\x36\x9b\xe7\x97\x8b\x42\x87\x6e\x2f\x43\x6e\xcb\x5e\x64\xde\x63\xdc\x31\x45\x21\x27\xed\x23\x10\x29\x4d\x92\x87\x1a\xcb\x9d\xb4\xfa\x6a\x6d\xee\x36\x9a\x51\x75\x6b\xea\x54\x51\xe8\xae\x52\x14\xba\x6e\x72\x54\xdf\x79\xd7\x50\x34\xae\x75\x78\x4f\x4a\xe2\xac\x46\x6f\x13\xc1\xcd\x21\xd5\x42\x22\xc4\xc0\x71\x05\xef\x0b\x5c\x07\x37\xc6\x30\x30\xb7\x5a\x69\xa2\x71\x5a\x5d\xf0\x9a\xe1\x29\xfc\x76\x3b\x74\x16\x53\xc5\x14\x78\xc1\x98\x31\x6c\xcc\x3f\x59\xa1\x89\x76\x6e\x2e\xac\xc8\x53\xa2\xf1\xc6\xb8\x0e\x6c\xbe\x21\xe4\xe4\x91\x09\x92\x9e\x34\xca\x61\xed\x81\x83\x1c\xd7\xd3\x4e\x37\x86\xed\x24\x55\x05\x87\xf2\x54\x6e\xfd\x54\x75\x89\x24\xe9\x14\x28\xf1\x4e\xa2\x5a\xba\x0a\x6d\xd7\x5a\xeb\x6d\x4a\x89\xba\x90\xdc\x92\xf3\x93\x14\x19\x55\x38\x18\x48\x54\x82\x95\x78\x02\xf1\xac\xf1\x03\x70\x8a\xb9\x40\x3d\x58\x51\x9e\x8a\x55\xc0\x44\x62\xa9\x18\xc2\xd3\xe6\x24\xd0\x4b\xe4\x36\x34\x17\x5c\xf5\x63\x01\xaa\x85\x8d\xee\x64\x54\x0f\x8e\x5b\xb4\x1d\x0f\xa1\x0e\x0b\x52\xa2\xc9\xc9\x1f\x5b\x71\x55\x2d\x83\x96\x71\xd3\x8c\xeb\x51\xc5\x62\x8d\xb4\xa6\xf1\x3f\x00\x1b\x7e\x7b\x18\x37\xfc\x01\xbc\xf0\x9f\xcd\xc5\xfc\x5c\x0a\xaa\xf8\xcf\x67\x01\xe0\xdb\xf0\xe8\xc5\x8b\xfc\xd6\x4a\xfb\xd4\xb9\xb4\x46\x33\xa6\xe0\x19\x65\xf7\x6b\x9d\x1b\x76\x3c\x0a\xc9\xa6\x60\x3b\xc9\x34\x0c\x8d\x9f\xe5\x82\x05\x09\x2b\x94\x46\x19\x76\xdc\x37\xc3\x43\x2b\x09\xbd\x44\xf9\xb9\x4b\xb5\x57\x6a\xc6\xb7\x2d\x52\x76\x38\x6b\x4e\x8b\xb9\x28\x47\x9b\x93\xa3\xa3\xf7\x85\x7d\x2c\xe5\x82\x23\xd7\x83\x63\xa7\x3f\xc7\x43\x5b\xad\xc6\x2c\x67\x56\x1e\x7e\xdf\x76\xef\xaa\x67\x24\x82\x15\x19\x57\x4d\x17\x68\xd4\xcc\xaa\xb6\x55\x33\xa3\xd9\x76\xb0\x55\xec\x4a\xe5\xec\x9f\xc6\xf8\x80\x8f\x95\x29\x48\x08\x63\x28\x3f\x26\x7f\xbf\x1b\x7e\x72\x29\x72\x23\x50\xc7\x2e\xf5\xf1\xed\xf0\xa3\x38\x5e\x0c\xc3\x94\x42\xef\xea\xba\x1a\x48\x6d\x3f\x22\xdb\x1d\xd7\xbe\xd9\x51\xb6\x67\x7d\x67\xea\xb4\xc5\x28\xdf\xe3\xe1\xdb\xb7\xad\xe9\x54\x6d\xcc\xa6\x53\xe5\x9f\x10\x8b\x6b\x4c\x0a\x73\x05\xdf\x52\xd3\xe6\x20\x53\x9d\x78\xf7\xfa\x42\xd9\xb2\xf4\xd0\xf8\xd5\xeb\xbd\xc6\xbe\x24\xea\xda\x54\xd2\x7d\x58\xb8\x6d\x55\x9d\xfd\x53\x9d\xdd\x4a\x9b\xdd\x52\xed\xe5\x3b\xcd\x2f\xba\x13\x42\xf7\xe8\x72\xa6\xe7\xe8\x72\x1e\xd5\x13\xa6\x66\x2b\x27\x7a\xd9\xe3\x2a\x0a\x9d\x67\xb3\x6f\xdb\xc5\x9f\x3b\x3a\xc7\xb6\xc5\x99\x33\x53\x68\x4c\xeb\x56\xd1\xe1\x75\x0a\x77\x05\xb7\xad\x64\xb0\x57\x41\x7f\x20\x1a\x07\x7a\x49\x55\xe0\x8a\x43\x9e\x9a\xb0\x13\xf0\xf7\x4e\x2b\x4d\xa4\xb6\x0e\x1d\xcd\x6e\x98\x7f\x6e\xb9\x56\x1a\x47\x3b\x7c\x15\xdb\xb6\x0c\xdf\x7c\xb3\x3b\x19\x30\xe4\x0b\xbd\x84\x19\x8c\x5a\x4b\x6d\xdc\x55\x29\x89\x04\x92\xe7\xdb\xf7\x80\x7d\x08\xa0\x11\x9b\xaf\xcd\xbb\xdc\xb8\x1a\xf9\xed\xbd\x0a\xa6\xd0\x6f\x7a\x75\xb7\x5d\x11\x9d\x2c\x77\xbc\x1b\x2c\x25\x61\x5b\x38\xfd\x06\x12\x43\x49\x58\xb7\x46\x80\x44\x22\xd1\x7b\xf9\xb0\x2f\x99\x20\xa5\x2a\x37\x6b\x0e\x8e\xdb\x9d\xfd\xf8\xe4\x59\x97\x5a\xff\x4f\x9a\x55\x7a\x5b\xef\x0e\xf1\x73\x9b\xe0\x52\xb7\x9e\x32\x9d\x7d\xdc\xbe\x9e\x5e\x98\xa1\xf2\xef\x4b\x72\x1d\x0d\x0b\xd4\xee\xc9\xe2\xd2\x54\x29\x5c\x46\xaf\x92\xca\x29\x78\xb9\x14\x69\x91\xe8\x9c\x2c\xd0\x2f\xc7\x55\x13\xf1\xcc\x45\x31\xb3\x75\x47\xf2\x9a\xd3\x67\xac\x93\xd1\xf8\xca\x1f\x5d\xfa\xe3\xd1\xdb\xf1\xc5\xf4\xf4\x74\x3a\x7a\x15\x9c\x4d\x2e\xcf\xc6\xe7\x93\xd1\xc5\x87\x3a\xa4\x3a\xcf\x1f\x0d\x38\x3d\x9b\x5c\x9d\x9e\x8d\x27\x4d\x40\xa5\x08\xd3\x56\x8b\xed\xb6\xbd\x56\xd9\x12\x4b\x8a\x2b\xb5\x2d\xb9\xf1\xe9\x97\xde\x4c\xbc\x00\xc2\xab\xab\xf1\xc5\xd5\xe5\xe5\x87\x7e\xe8\x41\x28\x93\xb3\xd3\xd1\xf9\x78\xbc\x13\xb8\x85\x74\xbb\x9d\x69\x35\xf6\xc3\xf8\x26\xff\x23\xf8\x76\x7e\xea\x3c\xed\xfd\xcd\xd4\x86\x48\x34\xe5\x8b\x3d\x5b\x78\x10\xea\x27\x40\x3e\x1d\x5d\x9c\x8f\x47\xe7\x3b\x90\x5f\x0e\xdd\x24\x38\x9d\xec\x40\xdf\x43\xc1\xed\xae\xc7\x66\xd7\x74\x90\x97\x14\x35\xa1\xec\xff\xbc\xf4\x79\xb1\xef\xea\x2f\x9a\x94\x8e\xe5\x73\x05\xe3\xf4\xcb\x17\x8c\xbe\x26\x1e\x84\xfa\x09\x90\xff\xcb\xcf\xc0\xad\x6b\xf4\x47\xdb\xff\x70\xfd\x77\x00\x00\x00\xff\xff\x53\xb9\xb2\x47\x25\x18\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6181, mode: os.FileMode(436), modTime: time.Unix(1562867714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
