// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// test/cmd/test-service/assets/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x73\xe3\xb6\x11\x7f\xd7\xa7\xd8\x63\x67\x22\x39\x15\x49\x49\xfe\x77\x56\x45\x4d\x1a\xe7\xda\x49\xa7\x9d\x4b\xe2\xbb\x9b\xf4\x32\x9e\x06\x22\x57\x12\x6c\x10\x60\x01\x90\xb2\xc7\xa3\xef\xde\x01\x40\x52\x24\xa5\xb3\x7c\xd7\x97\x36\x93\x97\x33\xb8\xd8\x5d\xec\xef\x87\xc5\xee\xea\x66\xaf\xbe\x7b\x7b\xfd\xee\x9f\x3f\xbc\x81\xb5\x4e\xd9\xbc\x37\x33\x7f\x80\x11\xbe\x8a\x3c\xe4\xde\xbc\x07\x30\x5b\x23\x49\xec\x22\x45\x4d\x20\x5e\x13\xa9\x50\x47\x5e\xae\x97\xfe\x6b\x6f\xb7\xb1\xd6\x3a\xf3\xf1\xdf\x39\x2d\x22\xef\x67\xff\xfd\x9f\xfd\x6b\x91\x66\x44\xd3\x05\x43\x0f\x62\xc1\x35\x72\x1d\x79\xdf\xbf\x89\x30\x59\x61\xc3\x8e\x93\x14\x23\xaf\xa0\xb8\xc9\x84\xd4\x0d\xd5\x0d\x4d\xf4\x3a\x4a\xb0\xa0\x31\xfa\xf6\x63\x08\x94\x53\x4d\x09\xf3\x55\x4c\x18\x46\xe3\x3d\x37\x09\xaa\x58\xd2\x4c\x53\xc1\x1b\x9e\xa8\xd2\x54\xf8\x1b\x21\xef\x55\x46\x62\x84\x77\xa8\x34\xdc\xa0\x34\x9e\x41\xd1\x34\x63\x08\xef\xbf\xf7\xe6\x3d\xe3\x4d\x53\xcd\x70\xde\x31\x99\xb6\x6c\x66\xa1\x53\xb2\xfa\x8c\xf2\x7b\x90\xc8\x22\x4f\xe9\x47\x86\x6a\x8d\xa8\x3d\x58\x4b\x5c\x46\x9e\xe1\x44\x4d\xc3\x30\x4e\xf8\x9d\x0a\x62\x26\xf2\x64\xc9\x88\xc4\x20\x16\x69\x48\xee\xc8\x43\xc8\xe8\x42\x85\x8b\x9c\xa5\x24\x1c\x05\x97\xc1\x79\x18\xab\xf2\x3b\x88\x95\xf2\x80\x72\x8d\x2b\x49\xf5\x63\xe4\xa9\x35\x99\x9c\x5f\xf8\xf9\xdd\x9b\xf0\xe3\xfb\x6f\x2f\xae\xff\xf1\x31\x7d\xfc\xdb\xcd\xea\xc7\xbb\x9f\xff\x7a\xfd\x97\x33\xf5\xd3\x4f\x1c\xdf\xd2\xf4\xc7\x8c\x7d\xfb\xe1\xef\xf9\xeb\xb7\xef\xcf\x37\x91\x07\xb1\x14\x4a\x09\x49\x57\x94\x47\x1e\xe1\x82\x3f\xa6\x22\x57\x1e\x84\x96\x39\x47\x16\x28\x19\xef\x62\x2d\x72\xbc\x53\x81\x90\xab\xf0\x4e\x99\x8f\xe0\x4e\x79\xf3\x59\xe8\x54\x3f\x69\x95\xf3\xec\x7e\x65\x61\x15\x39\x3e\x7c\x33\x09\x46\xc1\xe8\xb3\xcc\xc8\x03\x15\xea\x9b\x51\x30\xbe\x0a\x46\x61\x42\x95\x76\x92\x20\xa5\xbc\x13\x81\xf1\x15\xd6\x49\xb9\x10\xc9\xa3\x59\x00\xcc\x12\x5a\x00\x4d\x22\x8f\x64\x99\xe7\x44\x56\xcc\x49\x01\x31\x23\x4a\x45\x1e\x27\xc5\x82\xc8\xc6\x66\x6d\xd7\x52\xf0\x17\x92\xf0\xa4\xa3\x06\x30\x23\x1d\x35\xaa\x31\xed\x5e\xf5\x8a\xea\x75\xbe\xb0\x90\x52\x42\x95\x96\x24\xec\xe4\xd2\x9e\x5f\x80\x6e\x82\xfa\xa0\x4d\xba\x29\x97\x6e\xdd\x30\x42\xd2\x01\x10\x26\xb4\x98\xf7\x66\xaf\x7c\xff\x18\xb0\x14\x79\xbe\x8f\x6b\x5f\x0f\x0f\xc0\x3f\xa8\x68\x29\xd8\xd7\x6c\xeb\x2a\x64\x18\xeb\x83\x6a\x26\x2f\xec\x2e\x14\x7e\x2a\x12\xfb\x8c\x50\x29\xf3\x7e\x0f\xab\x03\xcc\x84\x7d\xdf\x90\x50\x45\x16\x0c\x93\xf9\x8d\x73\x50\xda\xcd\x42\xb7\x7f\xcc\xbc\xf0\x97\x42\xd6\xa7\x01\xe5\x95\x03\xe5\x41\xe1\x2f\x28\x4f\xa6\x05\x61\x39\xd6\x2a\x41\x2e\x99\x37\x7f\x7a\xaa\x3e\x4d\xc5\xd9\x6e\x9f\x3f\x6e\x16\x3a\x74\x07\x19\x72\xd7\xf6\x22\x71\x29\xf4\xfd\x83\x37\xdf\x14\x70\x52\xd8\x27\x52\x91\xab\x49\x7c\x5f\xe1\x59\x4a\x5b\x24\xad\xcc\x3d\x29\xb3\x2a\x5f\x4f\xe5\x6a\x16\xba\x27\x35\x0b\x5d\x4b\xe8\x55\x0f\xd7\x75\x05\x8d\x0f\x3a\xbc\x23\x05\x71\x52\x53\x34\x63\xc1\x4d\xb2\x6a\x21\x11\x22\xe0\xb8\x81\x0f\x39\x3e\x04\x37\x46\x30\x78\xea\x01\x28\x4d\x34\x4e\xe1\xc9\x1e\x54\xb1\x3c\x85\x5f\x6e\x87\x4e\x62\xa2\x98\x02\xcf\x19\x33\x82\xad\xf9\x27\xcd\x35\xd1\x4e\xcd\x99\xe5\x59\x42\x34\xde\x18\xd5\x81\xf5\x37\x84\x8c\x3c\x32\x41\x92\x93\x52\xa3\x3c\x27\x70\x90\xa3\x6a\xdb\xee\x6d\x87\x4d\x27\x65\x04\xc7\xfc\x94\x6a\x5d\x57\x55\x88\x24\x6e\x05\x28\x71\x29\x51\xad\x5d\x84\xb6\xf5\x3c\xe8\x9d\x4b\x89\x3a\x97\xdc\x92\xf3\x83\x14\x29\x55\x38\x18\x48\x54\x82\x15\x78\x02\xd1\xbc\xd6\x03\x70\x65\x6f\x85\x7a\xb0\xa1\x3c\x11\x9b\x80\x89\xd8\x52\x31\x84\xa7\xed\x49\xa0\xd7\xc8\xad\x69\x26\xb8\xea\xda\x02\x94\x07\x9b\xfa\x93\x52\x3d\xe8\x37\x68\xeb\x0f\xa1\x32\x0b\x12\xa2\xc9\xc9\x9f\x1a\x76\x65\x2c\x83\x86\x70\x5b\xaf\xab\x55\xc9\x62\x85\xb4\xa2\xf1\xbf\x00\x1b\x7e\x7d\x1c\x37\xfc\x11\xbc\xf0\x5f\xf5\xe3\xfc\x52\x0a\x4a\xfb\x2f\x67\x01\xe0\xeb\xb0\xf7\xe2\x43\x7e\x69\xb8\x7d\x6a\x3d\x5a\x53\x37\xa6\xe0\x65\x52\x24\xde\xb0\xb5\x93\x4b\x36\x05\xdb\x49\xa6\x61\x48\x14\x23\xf7\xbe\xe9\x03\xb6\x99\xb4\x54\xb7\xc3\x63\xde\x97\x48\x74\x2e\xd1\x7f\x78\xee\x88\x5a\x29\xe8\x1e\xd6\x3c\xab\x5e\xdf\x36\xa8\xd8\x63\xaa\xce\x11\xf3\x3c\x7a\xdb\x93\x5e\xef\x43\x6e\xe7\x9c\x4c\x70\xe4\x7a\xd0\x77\x55\xa7\x3f\xb4\xf1\x6a\x4c\x33\x66\x8b\xc2\xaf\xbb\xde\x5d\x76\x8b\x58\xb0\x3c\xe5\xaa\xae\xff\x75\x0d\xb3\xf5\xda\xd6\x30\x53\xad\xed\x62\x57\xab\xcb\xda\x66\xff\xd4\xc2\x7b\x7c\x2c\x45\x41\x4c\x18\x43\xf9\xa9\xa2\xf7\xab\x61\x29\x93\x22\x33\x65\xa9\xef\x5c\xf7\x6f\x87\x9f\xc4\xf1\x62\x18\x26\x14\xba\xac\xe2\xaa\x21\x35\xf5\x88\x4c\xea\x80\xed\x08\x19\x79\x4f\x0b\x12\xdf\xaf\xa4\xc8\x79\x72\x2d\x98\x90\x53\x28\x41\x98\x8f\x6d\x73\xb8\x31\x73\x10\xca\xa6\x2f\xdf\x89\x5a\xed\x73\x96\x1d\xd0\xf0\xed\x10\x6b\x3a\x5a\x93\x21\xd3\xd1\xb2\xcf\xb0\xc5\x07\x8c\x73\xf3\x4c\xdf\x51\xd3\x0e\x21\x55\x2d\x7b\x37\xa9\xa1\x6c\x48\x3a\xd8\xfd\x72\x4c\xaf\x98\x5a\x13\x75\x6d\x22\x69\x0f\x20\x2e\x09\x54\xeb\xb6\x55\xeb\x6e\x93\xfa\x6e\x55\xf3\xf8\x56\x83\x9c\x2d\x85\xd0\x1d\xba\x9c\xe8\x39\xba\x9c\x46\x39\xea\x54\x6c\x65\x44\xaf\x3b\x5c\xcd\x42\xa7\x59\xdf\xf2\xee\xf0\xe7\x12\xad\x6f\xdb\xa0\xc9\xb0\x5c\x63\x52\xb5\x93\x16\xaf\x53\x58\xe6\xdc\xb6\x9b\xc1\xc1\x2a\xfb\x1d\xd1\x38\xd0\x6b\xaa\x02\x17\x1c\xf2\xc4\x98\x9d\x80\x7f\x70\x5b\x69\x22\xb5\x55\x68\xd5\xf5\x9a\xf9\xe7\x8e\x6b\xb8\x71\xb4\xc3\xab\xc8\xb6\x6e\xf8\xea\xab\xfd\xcd\x80\x21\x5f\xe9\x35\xcc\x61\xd4\x38\x6a\xeb\x1e\x56\x41\x24\x90\x2c\xdb\xcd\x0c\x76\x58\x40\x53\xa0\xfe\x60\x66\x78\xa3\x6a\x4a\x74\x67\x72\x98\x42\xb7\x31\x56\x1d\x79\x43\x74\xbc\xde\xd3\xae\xb1\x14\x84\xed\xe0\x74\x9b\x4c\x04\x05\x61\xed\x18\x01\x62\x89\x44\x1f\xe4\xc3\x4e\x3b\x41\x42\x55\x66\xce\x1c\xf4\x9b\xdd\xbf\x7f\xf2\xac\x4a\xd5\x23\x4e\xea\x53\x3a\x57\xef\x92\xf8\xb9\x4b\x70\xae\x1b\xe3\x4e\xeb\x1e\x77\x13\xd6\x0b\x3d\x94\xfa\xdd\x02\x5e\x59\xc3\x0a\xb5\x1b\x6b\x9c\x9b\xd2\x85\xf3\xe8\x95\x85\xb5\xec\x68\x79\xac\x33\xb2\x42\xbf\x18\x97\x8d\xc7\x33\x0f\xc5\xec\x56\x1d\xcc\xab\xb3\xcf\x48\x27\xa3\xf1\x95\x3f\xba\xf4\xc7\xa3\x77\xe3\x8b\xe9\xe9\xe9\x74\xf4\x3a\x38\x9b\x5c\x9e\x8d\xcf\x27\xa3\x8b\x8f\x95\x49\x99\xcf\x9f\x34\x38\x3d\x9b\x5c\x9d\x9e\x8d\x27\xb5\x41\x59\x11\xa6\x8d\x36\xdc\x6e\x93\x8d\xb0\x25\x16\x14\x37\x6a\x17\x72\xad\xd3\x0d\xbd\xde\x78\x01\x84\xd7\x57\xe3\x8b\xab\xcb\xcb\x8f\x5d\xd3\xa3\x50\x26\x67\xa7\xa3\xf3\xf1\x78\xcf\x70\x07\xe9\x76\xb7\xd3\x18\x04\x8e\xe3\x9b\xfc\x9f\xe0\xdb\xfb\x49\xf4\x74\xf0\xb7\x55\x13\x22\xd1\x94\xaf\x0e\x5c\xe1\x51\xa8\x9f\x01\xf9\x74\x74\x71\x3e\x1e\x9d\xef\x41\x7e\x39\x74\xe3\xe0\x74\xb2\x07\xfd\x00\x05\xb7\xfb\x1a\xdb\x7d\xd1\x51\x5e\x12\xd4\x84\xb2\xdf\x79\xe9\xf2\x62\x06\xdd\xdf\x36\x29\x2d\xc9\x97\x16\x8c\xd3\xdf\x7e\xc1\xe8\xd6\xc4\xa3\x50\x3f\x03\xf2\xff\x78\x0e\xdc\xba\x46\xdf\xdb\xfd\xcf\xea\x7f\x02\x00\x00\xff\xff\xbb\xfd\x0c\x31\x0e\x18\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6158, mode: os.FileMode(436), modTime: time.Unix(1575035878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
