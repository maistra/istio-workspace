// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// test/cmd/test-service/assets/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x73\xe3\xb6\x11\x7f\xf7\xa7\xd8\x30\x33\xb1\x9c\x8a\xa4\x24\xff\x3b\xab\xa4\x26\x8d\x73\xed\xa4\xd3\xce\x25\xf1\xdd\x4d\x7a\x19\x4f\x03\x91\x2b\x09\x36\x08\xb0\x00\x48\xcb\xe3\xd1\x77\xef\x00\x20\x29\x92\xd2\x59\xbe\xeb\x4b\x7b\xd3\x97\x33\xb8\xd8\x5d\xec\xfe\xb0\xf8\xed\xea\xa2\xaf\x7e\x78\x73\xfd\xf6\x1f\x3f\xbd\x86\x95\xce\xd8\xec\x28\x32\x7f\x80\x11\xbe\x8c\x3d\xe4\xde\xec\x08\x20\x5a\x21\x49\xed\x22\x43\x4d\x20\x59\x11\xa9\x50\xc7\x5e\xa1\x17\xfe\x2b\x6f\xbb\xb1\xd2\x3a\xf7\xf1\x5f\x05\x2d\x63\xef\x57\xff\xdd\x9f\xfc\x6b\x91\xe5\x44\xd3\x39\x43\x0f\x12\xc1\x35\x72\x1d\x7b\x3f\xbe\x8e\x31\x5d\x62\xcb\x8e\x93\x0c\x63\xaf\xa4\xf8\x90\x0b\xa9\x5b\xaa\x0f\x34\xd5\xab\x38\xc5\x92\x26\xe8\xdb\x8f\x21\x50\x4e\x35\x25\xcc\x57\x09\x61\x18\x8f\x77\xdc\xa4\xa8\x12\x49\x73\x4d\x05\x6f\x79\xa2\x4a\x53\xe1\x3f\x08\x79\xaf\x72\x92\x20\xbc\x45\xa5\xe1\x06\xa5\xf1\x0c\x8a\x66\x39\x43\x78\xf7\xa3\x37\x3b\x32\xde\x34\xd5\x0c\x67\x3d\x93\x69\xc7\x26\x0a\x9d\x92\xd5\x67\x94\xdf\x83\x44\x16\x7b\x4a\x3f\x32\x54\x2b\x44\xed\xc1\x4a\xe2\x22\xf6\x0c\x26\x6a\x1a\x86\x49\xca\xef\x54\x90\x30\x51\xa4\x0b\x46\x24\x06\x89\xc8\x42\x72\x47\xd6\x21\xa3\x73\x15\xce\x0b\x96\x91\x70\x14\x5c\x06\xe7\x61\xa2\xaa\xef\x20\x51\xca\x03\xca\x35\x2e\x25\xd5\x8f\xb1\xa7\x56\x64\x72\x7e\xe1\x17\x77\xaf\xc3\x0f\xef\xbe\xbf\xb8\xfe\xfb\x87\xec\xf1\xaf\x37\xcb\x9f\xef\x7e\xfd\xcb\xf5\x9f\xcf\xd4\x2f\xbf\x70\x7c\x43\xb3\x9f\x73\xf6\xfd\xfb\xbf\x15\xaf\xde\xbc\x3b\x7f\x88\x3d\x48\xa4\x50\x4a\x48\xba\xa4\x3c\xf6\x08\x17\xfc\x31\x13\x85\xf2\x20\xb4\xc8\x39\xb0\x40\xc9\x64\x1b\x6b\x59\xe0\x9d\x0a\x84\x5c\x86\x77\xca\x7c\x04\x77\xca\x9b\x45\xa1\x53\xfd\xa8\x55\xc1\xf3\xfb\xa5\x4d\xab\x2c\x70\xfd\xdd\x24\x18\x05\xa3\x4f\x32\x23\x6b\x2a\xd4\x77\xa3\x60\x7c\x15\x8c\xc2\x94\x2a\xed\x24\x41\x46\x79\x2f\x02\xeb\xcb\x40\x6d\xbc\x02\xa4\xb4\x84\x27\xbb\x02\x58\xcf\x85\x4c\x51\x4e\x61\x9c\xaf\x41\x09\x46\x53\xf8\x7a\x34\x1a\xd9\xdd\x8d\xb1\x0b\x1b\xc3\x28\x6c\xea\x7a\x2e\xd2\x47\xe7\x2b\x32\xce\x68\x1a\x7b\x24\xcf\xbd\x59\xe5\x14\x20\xe2\xa4\x84\x84\x11\xa5\x62\x8f\x93\x72\x4e\x64\x6b\xb3\xb1\xeb\x28\xf8\x73\x49\x78\xda\x53\x03\x88\x48\x4f\x8d\x6a\xcc\xfa\xd5\xb2\xa4\x7a\x55\xcc\x2d\x2a\x19\xa1\x4a\x4b\x12\xf6\xca\x71\xc7\x2f\x40\xbf\xc6\x7d\xd0\xa6\x62\x95\xab\xd8\x7e\x18\x21\xe9\x25\x10\xa6\xb4\xb4\xd0\x3e\x9b\x54\x86\xbc\xd8\xcd\x69\x57\x0f\xf7\xa4\xbe\x57\xd1\xa6\xbf\xab\xd9\xd5\x55\xc8\x30\xd1\x7b\xd5\x4c\x29\xd8\x5d\x28\xfd\x4c\xa4\xf6\x15\xa2\x52\xe6\xf9\xef\x57\x07\x88\x84\xa5\x07\x48\xa9\x22\x73\x86\xe9\xec\xc6\x39\xa8\xec\xa2\xd0\xed\x1f\x32\x2f\xfd\x85\x90\xcd\x69\x40\x79\xed\x40\x79\x50\xfa\x73\xca\xd3\x69\x49\x58\x81\x8d\x4a\x50\x48\xe6\xcd\x9e\x9e\xea\x4f\x43\x58\x9b\xcd\xf3\xc7\x45\xa1\xcb\x6e\x2f\x42\xee\xca\x5e\x24\xde\x23\xdc\x11\x45\x21\x27\xed\x12\x88\x94\x26\xc9\x7d\x9d\xcb\x42\x5a\x7e\xb5\x32\xf7\x1a\xcd\xaa\x7a\x35\xb5\xab\x28\x74\x4f\x29\x0a\x5d\x37\x39\xaa\xdf\xbc\x6b\x28\x1a\xd7\x3a\xbc\x23\x25\x71\x52\xc3\xb7\x89\xe0\xa6\x48\xb5\x90\x08\x31\x70\x7c\x80\xf7\x05\xae\x83\x1b\x23\x18\x98\x57\xad\x34\xd1\x38\xad\x1e\x78\x8d\xf0\x14\x7e\xbb\x1d\x3a\x89\x89\x62\x0a\xbc\x60\xcc\x08\x36\xe6\x9f\xac\xd0\x44\x3b\x35\x67\x56\xe4\x29\xd1\x78\x63\x54\x07\xd6\xdf\x10\x72\xf2\xc8\x04\x49\x4f\x1a\xe6\xb0\xf2\xc0\xa5\x1c\xd7\xdb\x8e\x37\x86\x6d\x27\x55\x04\x87\xfc\x54\x6a\x7d\x57\x75\x88\x24\xe9\x04\x28\x71\x21\x51\xad\x5c\x84\xb6\x6b\xad\xf5\xd6\xa5\x44\x5d\x48\x6e\xc1\xf9\x49\x8a\x8c\x2a\x1c\x0c\x24\x2a\xc1\x4a\x3c\x81\x78\xd6\xe8\x01\x38\xc6\x5c\xa2\x1e\x3c\x50\x9e\x8a\x87\x80\x89\xc4\x42\x31\x84\xa7\xcd\x49\xa0\x57\xc8\xad\x69\x2e\xb8\xea\xdb\x02\x54\x07\x1b\xde\xc9\xa8\x1e\x1c\xb7\x60\x3b\x1e\x42\x6d\x16\xa4\x44\x93\x93\x3f\xb6\xec\xaa\x58\x06\x2d\xe1\xa6\x59\xd7\xab\x0a\xc5\x3a\xd3\x1a\xc6\xff\x20\xd9\xf0\xdb\xc3\x79\xc3\x1f\xc0\x0b\xff\xd9\x3c\xcc\xcf\x85\xa0\xb2\xff\x7c\x14\x00\xbe\x0d\x8f\x5e\x7c\xc8\x6f\x2d\xb7\x4f\x9d\x47\x6b\x38\x63\x0a\x5e\x2e\x45\xea\x0d\x3b\x3b\x85\x64\x53\xb0\x1d\x64\x1a\x86\x44\x31\x72\xef\x1b\xfe\xb7\x4d\xa4\xa3\xba\x19\x1e\xf2\xbe\x40\xa2\x0b\x89\xfe\xfa\xb9\x23\x1a\xa5\xa0\x7f\x58\xfb\xac\x66\x7d\xdb\x82\x62\x07\xa9\xa6\x46\xcc\xf3\x38\xda\x9c\x1c\x1d\xbd\x2f\xec\x88\x94\x0b\x8e\x5c\x0f\x8e\x1d\xeb\x1c\x0f\x6d\xbc\x1a\xb3\x9c\x59\x52\xf8\x7d\xdb\xb3\xab\x4e\x91\x08\x56\x64\x5c\x35\xdc\xdf\x70\x98\xe5\x6a\xcb\x61\x86\xa9\xed\x62\xcb\xd3\x15\xb7\xd9\x3f\x8d\xf0\x1e\x1f\x2b\x51\x90\x10\xc6\x50\x7e\x8c\xf4\x7e\x37\x28\xe5\x52\xe4\x86\x96\x8e\x9d\xeb\xe3\xdb\xe1\x47\xf3\x78\x71\x1a\x26\x14\xba\xa8\xe3\x6a\x52\x6a\xeb\x11\x99\x7a\x60\x47\x9a\xd8\x9b\x93\xe4\x7e\x29\x45\xc1\x53\x3f\x11\x4c\xc8\xe9\xd3\x53\x15\xbe\xf9\xda\x6c\xda\xf3\x8c\x19\x7d\x50\xb6\xdd\xf8\x4e\xd4\xe9\x9a\x51\xbe\x47\xc3\xb7\xa3\xaf\x69\x64\x6d\x70\x4c\x23\xcb\x3f\xc1\x16\xd7\x98\x14\xe6\x85\xbe\xa5\xa6\x0b\x42\xa6\x3a\xf6\x6e\x38\x43\xd9\x92\xf4\xd2\xf6\xab\xe1\xbe\x06\x69\x45\xd4\xb5\x89\xa4\x3b\x77\xb8\xfb\x57\x9d\x8b\x56\x9d\x6b\x4d\x9b\x6b\x55\xed\xe3\x3b\xbd\x31\x5a\x08\xa1\x7b\x70\x39\xd1\x73\x70\x39\x8d\x6a\xc2\xa9\xd1\xca\x89\x5e\xf5\xb0\x8a\x42\xa7\xd9\x5c\xf0\xf6\xf0\xe7\x6a\xec\xd8\x76\x40\x53\x5c\x85\xc6\xb4\xee\x24\x1d\x5c\xa7\xb0\x28\xb8\xed\x34\x83\xbd\x04\xfb\x03\xd1\x38\xd0\x2b\xaa\x02\x17\x1c\xf2\xd4\x98\x9d\x80\xbf\x77\x5b\x69\x22\xb5\x55\xe8\x50\x7a\x83\xfc\x73\xc7\xb5\xdc\x38\xd8\xe1\xab\xd8\x76\x6d\xf8\xe6\x9b\xdd\xcd\x80\x21\x5f\xea\x15\xcc\x60\xd4\x3a\x6a\xe3\xde\x54\x49\x24\x90\x3c\xdf\x8e\x0b\x76\x4e\x40\xc3\x4d\x5f\x9b\xb1\xdd\xa8\x1a\x76\xee\x0d\x0d\x53\xe8\xf7\xc4\xba\x19\x3f\x10\x9d\xac\x76\xb4\x9b\x5c\x4a\xc2\xb6\xe9\xf4\xfb\x4b\x0c\x25\x61\xdd\x18\x01\x12\x89\x44\xef\xc5\xc3\x0e\x3a\x41\x4a\x55\x6e\xce\x1c\x1c\xb7\x1b\xff\xf1\xc9\xb3\x2a\x75\x7b\x38\x69\x4e\xe9\x5d\xbd\x2b\xe2\xe7\x2e\xc1\xb9\x6e\x4d\x3a\x9d\x7b\xdc\x0e\x57\x2f\xf4\x50\xe9\xf7\xb9\xbb\xb6\x86\x25\x6a\x37\xd1\x38\x37\x95\x0b\xe7\xd1\xab\x38\xb5\x6a\x66\x45\xa2\x73\xb2\x44\xbf\x1c\x57\x3d\xc7\x33\x0f\xc5\xec\xd6\xcd\xcb\x6b\xaa\xcf\x48\x27\xa3\xf1\x95\x3f\xba\xf4\xc7\xa3\xb7\xe3\x8b\xe9\xe9\xe9\x74\xf4\x2a\x38\x9b\x5c\x9e\x8d\xcf\x27\xa3\x8b\x0f\xb5\x49\x55\xcf\x1f\x35\x38\x3d\x9b\x5c\x9d\x9e\x8d\x27\x8d\x41\xc5\x08\xd3\x56\x07\xee\x76\xc8\x56\xd8\x12\x4b\x8a\x0f\x6a\x1b\x72\xa3\xd3\x0f\xbd\xd9\x78\x41\x0a\xaf\xae\xc6\x17\x57\x97\x97\x1f\xfa\xa6\x07\x53\x99\x9c\x9d\x8e\xce\xc7\xe3\x1d\xc3\x6d\x4a\xb7\xdb\x9d\xd6\x0c\x70\x38\xbf\xc9\xff\x48\x7e\x3b\xbf\x84\x9e\xf6\xfe\xa4\x6a\xa7\x48\x34\xe5\xcb\x3d\x57\x78\x30\xd5\x4f\x48\xf9\x74\x74\x71\x3e\x1e\x9d\xef\xa4\xfc\xf2\xd4\x8d\x83\xd3\xc9\x4e\xea\x7b\x20\xb8\xdd\xd5\xd8\xec\x8a\x0e\xe2\x92\xa2\x26\x94\xfd\x1f\x97\x3e\x2e\x66\xc6\xfd\xb2\x41\xe9\x48\x3e\x97\x30\x4e\xbf\x7c\xc2\xe8\x73\xe2\xc1\x54\x3f\x21\xe5\xff\xf2\x1a\xb8\x75\x8d\xfe\x68\xfb\xff\xb1\xff\x0e\x00\x00\xff\xff\xb0\x4c\xcf\x13\x44\x18\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6212, mode: os.FileMode(436), modTime: time.Unix(1565693650, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
