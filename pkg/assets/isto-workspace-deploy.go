// Package assets Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// deploy/istio-workspace/crds/istio_v1alpha1_session_cr.yaml
// deploy/istio-workspace/crds/istio_v1alpha1_session_crd.yaml
// deploy/istio-workspace/operator.yaml
// deploy/istio-workspace/role.yaml
// deploy/istio-workspace/role_binding.yaml
// deploy/istio-workspace/service_account.yaml
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8b\x41\xae\x83\x30\x0c\x44\xf7\x39\x85\x2f\x10\xbe\xd8\xe6\x1a\x5f\xea\xde\x22\x83\x70\x0b\x76\x84\x4d\xa4\xde\xbe\x4a\xcb\x6e\xf4\xde\x3c\x6e\xf2\xc0\xe9\x62\x5a\x48\x3c\xc4\x26\x6b\x50\xdf\x64\x8d\x69\xb1\xe3\xaf\xcf\xbc\xb7\x8d\xe7\xf4\x12\xad\x85\xfe\xe1\xe3\x9b\x0e\x04\x57\x0e\x2e\x89\x48\xf9\x40\xa1\x80\x47\xf6\x5b\x7b\xc3\x32\xd4\x69\x57\x60\x0c\xa2\x78\x37\x14\xda\xc0\x15\xe7\x17\xfc\x32\x68\xcd\x97\xdf\xa8\xf3\x7e\xa1\xd0\x93\xdd\x74\xd4\x58\x47\x9b\xa9\x22\x58\x76\xcf\x7d\x4e\x9f\x00\x00\x00\xff\xff\xd4\x2d\x6a\x39\xb0\x00\x00\x00")

func deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYaml,
		"deploy/istio-workspace/crds/istio_v1alpha1_session_cr.yaml",
	)
}

func deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYaml() (*asset, error) {
	bytes, err := deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/istio-workspace/crds/istio_v1alpha1_session_cr.yaml", size: 176, mode: os.FileMode(436), modTime: time.Unix(1555493256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4e\x04\x31\x0c\x85\xfb\x9c\xc2\x27\x18\x34\x1d\x4a\x0b\x1d\x88\x02\x24\x7a\x6f\xc6\xbb\x6b\x6d\x26\xb6\x62\x67\x84\x84\xb8\x3b\xca\x64\xf9\x29\xb6\xcc\x97\x4f\xef\xbd\x04\x95\xdf\xa9\x1a\x4b\x89\x80\xca\xf4\xe1\x54\xfa\xc9\xa6\xcb\xbd\x4d\x2c\x77\xdb\x7c\x20\xc7\x39\x5c\xb8\x2c\x11\x1e\x9a\xb9\xac\xaf\x64\xd2\x6a\xa2\x47\x3a\x72\x61\x67\x29\x61\x25\xc7\x05\x1d\x63\x00\x28\xb8\x52\x04\x23\x1b\x41\x6c\xce\x32\x89\x52\xb1\x33\x1f\x7d\x4a\xb2\x06\x53\x4a\x5d\x3d\x55\x69\x1a\xe1\x96\x32\x72\xac\x5b\x00\xa3\xfd\x6d\x44\xee\x24\xb3\xf9\xd3\x7f\xfa\xcc\xe6\xfb\x8d\xe6\x56\x31\xff\x0d\xd8\xa1\x71\x39\xb5\x8c\xf5\x17\x07\x00\x4b\xa2\x14\xe1\xa5\xd7\x28\x26\x5a\x02\xc0\xf6\xf3\x19\xdb\x8c\x59\xcf\x38\x77\xaf\x1d\xea\xf5\xc5\xd7\x39\xe6\xe8\xcd\x22\x7c\x7e\x85\xef\x00\x00\x00\xff\xff\x66\x1b\x53\x70\x41\x01\x00\x00")

func deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYaml,
		"deploy/istio-workspace/crds/istio_v1alpha1_session_crd.yaml",
	)
}

func deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYaml() (*asset, error) {
	bytes, err := deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/istio-workspace/crds/istio_v1alpha1_session_crd.yaml", size: 321, mode: os.FileMode(436), modTime: time.Unix(1554454542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployIstioWorkspaceOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6f\xe2\x30\x10\xbd\xe7\x57\x8c\x50\xaf\xd0\xe5\x58\xdf\x22\xf0\xb2\xa8\x2d\x89\x42\xd4\xd5\x9e\xd0\xd4\x99\xb6\xde\xf8\x23\x6b\x3b\x54\xa8\xe2\xbf\xaf\x02\x61\x61\x43\x80\xb9\xe5\xf9\xf9\xcd\x9b\xc9\x73\x29\x4d\xc1\x20\x27\x5d\x29\x0c\x14\x61\x25\x5f\xc8\x79\x69\x0d\x83\xf5\x38\xaa\xd0\xa1\xa6\x40\xce\xb3\x08\x60\x08\x06\x35\x31\x98\x3f\xf2\xd5\x34\x99\x3c\xf2\x6c\x95\xf1\xd9\x7c\x99\x67\xbf\x22\x00\x00\x47\x7f\x6a\xe9\xa8\x60\x10\x5c\x4d\x3b\x68\x8d\xaa\x26\x06\x85\x15\x25\xb9\x91\xb4\x97\x54\xd2\x64\x39\xcf\x93\x9b\x3a\xe8\x15\x96\xa5\xa9\x7d\x20\xd3\x91\x9a\x3f\xc7\x33\xbe\x5a\xc4\xcf\xfc\x86\x86\xf4\x41\xda\xe1\xa7\x75\xa5\xaf\x50\x50\xaf\x4c\x1e\xcf\x6e\xa8\x34\xdb\xf2\xe1\xe4\x72\xce\x9f\x78\x9a\xf1\x25\x5f\x4c\xf8\xea\x85\x67\xcb\x79\xb2\xb8\xa1\x31\xf8\x36\x7a\x78\x18\x44\xf6\xf5\x37\x89\xd0\x6e\x78\xff\x3f\xa6\x54\x29\xbb\xd1\x64\xc2\x8e\x7f\xfa\x57\xb0\xaa\xfc\xfd\x7a\xbc\xc3\x35\x05\x2c\x30\x20\xdb\x7d\x41\xeb\xe4\x7c\x40\x00\x5f\x91\x38\xb0\x1c\x55\x4a\x0a\xf4\x0c\xc6\x2d\xe2\x49\x91\x08\xd6\x1d\x18\x00\x1a\x83\xf8\x78\xc2\x57\x52\xfe\x08\x5e\x6b\x00\x10\xda\x0c\x9d\x88\x74\xec\x35\xa5\xce\x34\xaf\xab\xfe\x6f\x7d\x6f\xd6\xad\xa5\xa0\x58\x08\x5b\x9b\xb0\xb8\x7a\x17\x40\x58\x13\x50\x9a\x36\xc1\xc7\x1a\xde\xe8\xba\x2f\xa9\xf1\x9d\x18\xdc\x7d\xf5\x44\x7e\x7b\xdf\x81\x0f\x19\x3e\x1c\x1c\x13\xb9\x65\xa7\x48\x1e\xcf\xb6\x9d\x3e\xc2\x6a\x8d\xa6\x60\x1d\xb8\xb1\x29\xcb\xae\x29\x74\xef\xbe\x8f\xd9\x2c\xa6\x77\x80\xb4\x56\x2a\xb5\x4a\x8a\x0d\x83\x58\x7d\xe2\xc6\x77\x58\x64\xd6\x7d\x82\xfb\x0d\xfd\x8c\xf3\xc9\x8f\xdd\x18\xcb\x34\x9e\xf0\x33\xde\x31\xce\x83\x8b\x1a\x69\x32\x3d\x3e\xcd\x9e\xcb\xdf\x9d\xd5\xe7\x0e\x9a\x7a\x93\xa4\x8a\x8c\xde\xfa\x4f\xdb\xf3\x14\xc3\x07\xfb\x17\xb7\x51\xd3\xf3\xa2\x95\x24\xe5\x59\x9c\x27\xd9\x55\x3f\x0c\x06\x9d\x60\x5c\x9e\xed\xe2\xc3\xef\xd5\xbd\xfb\xea\xe3\x6f\xa3\xbf\x01\x00\x00\xff\xff\x9f\xa5\xfc\x7a\x88\x05\x00\x00")

func deployIstioWorkspaceOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployIstioWorkspaceOperatorYaml,
		"deploy/istio-workspace/operator.yaml",
	)
}

func deployIstioWorkspaceOperatorYaml() (*asset, error) {
	bytes, err := deployIstioWorkspaceOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/istio-workspace/operator.yaml", size: 1416, mode: os.FileMode(436), modTime: time.Unix(1559313652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployIstioWorkspaceRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x3d\xaf\xdb\x30\x0c\xdc\xfd\x2b\x84\x2c\x01\x0a\xc4\x45\xb7\xc2\x6b\x87\xee\x45\xd1\x9d\x91\x2f\x09\x11\x49\x14\x48\xca\xc5\x7b\xbf\xfe\xc1\x8e\x93\x21\xce\x90\x4d\x27\x9d\xee\x83\xa4\xca\xff\xa0\xc6\x52\x86\xa0\x47\x8a\x3d\x35\xbf\x88\xf2\x27\x39\x4b\xe9\xaf\x3f\xad\x67\xf9\x3e\xfd\xe8\xae\x5c\xc6\x21\xfc\x4a\xcd\x1c\xfa\x47\x12\xba\x0c\xa7\x91\x9c\x86\x2e\x84\xa8\x58\x3e\xfc\xe5\x0c\x73\xca\x75\x08\xa5\xa5\xd4\x85\x50\x28\x63\x08\x6c\xce\x72\xf8\x2f\x7a\xb5\x4a\x11\x9d\xb6\x04\x1b\xba\x43\xa0\xca\xbf\x55\x5a\xb5\x59\xe5\x10\x76\xbb\x2e\x04\x85\x49\xd3\x88\xf5\xae\xca\x68\xcb\xc1\xa0\x13\x47\xdc\x00\xca\x58\x85\x8b\xdf\x50\x9d\x3b\x98\xa3\xf8\x24\xa9\x65\xc4\x44\x9c\x57\xe2\x84\x3b\x2b\x4a\x39\xf1\x39\x53\xbd\xeb\x45\xc5\xf2\x34\x41\x8f\xab\xdb\xfe\xdb\xfe\xbd\x58\x73\xb1\xa5\xcc\x93\xc0\x19\xbe\x15\xa0\xba\x78\x3e\x49\x8c\xa8\x49\x3e\xf2\x23\xdf\x48\xc8\x52\x0c\x2b\x54\xd4\xc4\x91\x1e\xd8\x9c\x1c\xa7\x96\xec\xbd\xd0\x59\x0a\xbb\x28\x97\x73\x1f\x45\x21\xd6\x47\xc9\xdb\x10\xeb\x54\x57\xf6\x8b\x32\xcb\xe4\xe6\xfd\x62\xeb\xb1\xec\xb5\x97\x8a\x62\x17\x3e\xf9\x6b\x87\x39\xdd\x26\xee\x57\x00\x00\x00\xff\xff\x31\x33\xc8\x3a\x79\x02\x00\x00")

func deployIstioWorkspaceRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployIstioWorkspaceRoleYaml,
		"deploy/istio-workspace/role.yaml",
	)
}

func deployIstioWorkspaceRoleYaml() (*asset, error) {
	bytes, err := deployIstioWorkspaceRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/istio-workspace/role.yaml", size: 633, mode: os.FileMode(436), modTime: time.Unix(1554454542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployIstioWorkspaceRole_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbd\x4e\x03\x31\x10\x84\x7b\x3f\xc5\x16\xb4\x09\x4a\x87\xdc\x1d\x51\x44\x05\x42\x09\xa2\xdf\xf8\x16\x58\xee\xce\x6b\xd6\xeb\x43\x80\x78\x77\x24\x3b\x10\x24\x24\xa0\x1c\xff\xcc\x7c\x33\x03\xc7\xde\xc3\x0d\x4d\x69\x44\x23\x87\x89\x6f\x49\x33\x4b\xf4\x30\xaf\x5c\x42\xc5\x89\x8c\x34\x7b\x07\xb0\x80\x88\x13\x79\xb8\xea\x2e\x37\xbb\xeb\x6e\xbd\x71\x00\x00\x4a\x4f\x85\x95\x7a\x0f\xa6\x85\xea\xd1\x8c\x63\x21\x0f\x9c\x8d\x65\x91\x5f\xb2\xd1\xe4\x64\xff\x48\xc1\x0e\x3e\x2d\x75\x3d\x96\x6c\xa4\x5b\x19\xe9\x9c\x63\xcf\xf1\xbe\xfe\xfe\xce\xa0\x7b\x0c\x4b\x2c\xf6\x20\xca\xaf\x68\x2c\x71\x39\x9c\xe5\x25\xcb\xe9\xbc\xaa\x8f\x27\x32\xec\xd1\xd0\x57\x05\x07\xc2\x96\xfc\x2c\x3a\xe4\x84\xa1\x41\xe5\x72\x24\x38\x32\xec\x48\x67\x0e\xd4\x85\x20\x25\xda\x9f\x26\xed\xae\x6a\x0f\x27\x6f\x5f\x4b\xbc\xb7\x29\x64\xa4\x2d\xdd\x7d\xb2\xfc\x68\xf9\x0f\x7b\x4c\x7c\xa1\x52\xd2\x2f\xd5\xdd\x47\x00\x00\x00\xff\xff\x9f\x0a\x67\x39\xb4\x01\x00\x00")

func deployIstioWorkspaceRole_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployIstioWorkspaceRole_bindingYaml,
		"deploy/istio-workspace/role_binding.yaml",
	)
}

func deployIstioWorkspaceRole_bindingYaml() (*asset, error) {
	bytes, err := deployIstioWorkspaceRole_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/istio-workspace/role_binding.yaml", size: 436, mode: os.FileMode(436), modTime: time.Unix(1554454542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployIstioWorkspaceService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x30\x08\x00\xc0\x9d\x57\xf0\x01\x07\x57\x36\xdf\x60\xe2\x4e\x28\x03\x69\x0a\x4d\xc1\xfa\x7d\x8f\xa7\x3d\xba\xd2\xc2\x09\xf7\x09\xdd\xbc\x11\xde\xba\xb6\x89\x5e\x22\xf1\x7a\xc1\xd0\xe2\xc6\xc5\x04\x88\xce\x43\x09\x2d\xcb\xe2\xf8\x62\xf5\x9c\x2c\x0a\x7f\x00\x00\x00\xff\xff\x94\xa0\xb7\x3f\x46\x00\x00\x00")

func deployIstioWorkspaceService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployIstioWorkspaceService_accountYaml,
		"deploy/istio-workspace/service_account.yaml",
	)
}

func deployIstioWorkspaceService_accountYaml() (*asset, error) {
	bytes, err := deployIstioWorkspaceService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/istio-workspace/service_account.yaml", size: 70, mode: os.FileMode(436), modTime: time.Unix(1554454542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/istio-workspace/crds/istio_v1alpha1_session_cr.yaml":  deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYaml,
	"deploy/istio-workspace/crds/istio_v1alpha1_session_crd.yaml": deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYaml,
	"deploy/istio-workspace/operator.yaml":                        deployIstioWorkspaceOperatorYaml,
	"deploy/istio-workspace/role.yaml":                            deployIstioWorkspaceRoleYaml,
	"deploy/istio-workspace/role_binding.yaml":                    deployIstioWorkspaceRole_bindingYaml,
	"deploy/istio-workspace/service_account.yaml":                 deployIstioWorkspaceService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"istio-workspace": &bintree{nil, map[string]*bintree{
			"crds": &bintree{nil, map[string]*bintree{
				"istio_v1alpha1_session_cr.yaml":  &bintree{deployIstioWorkspaceCrdsIstio_v1alpha1_session_crYaml, map[string]*bintree{}},
				"istio_v1alpha1_session_crd.yaml": &bintree{deployIstioWorkspaceCrdsIstio_v1alpha1_session_crdYaml, map[string]*bintree{}},
			}},
			"operator.yaml":        &bintree{deployIstioWorkspaceOperatorYaml, map[string]*bintree{}},
			"role.yaml":            &bintree{deployIstioWorkspaceRoleYaml, map[string]*bintree{}},
			"role_binding.yaml":    &bintree{deployIstioWorkspaceRole_bindingYaml, map[string]*bintree{}},
			"service_account.yaml": &bintree{deployIstioWorkspaceService_accountYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
