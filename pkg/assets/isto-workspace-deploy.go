// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// deploy/cluster_role.yaml
// deploy/service_account.yaml
// deploy/operator.yaml
// deploy/operator.tpl.yaml
// deploy/role.yaml
// deploy/crds/maistra.io_sessions_crd.yaml
// deploy/crds/maistra.io_sessions_cr.yaml
// deploy/examples/bookinfo/session_role.yaml
// deploy/examples/bookinfo/session_rolebinding.yaml
// deploy/olm-catalog/istio-workspace/manifests/istio-workspace.clusterserviceversion.yaml
// deploy/olm-catalog/istio-workspace/manifests/maistra.io_sessions_crd.yaml
// deploy/role_binding.yaml
// deploy/cluster_role_binding.yaml
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployCluster_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xcd\x8e\xd4\x30\x0c\xbe\xf7\x29\xa2\xbd\xac\x84\xd4\xae\xb8\xa1\x5e\x39\x70\xe3\x80\x10\x77\x6f\xea\xce\x5a\x93\xc4\x91\xed\x14\x31\x4f\x8f\xd2\x29\x4c\x07\xda\x41\x95\xe8\xa9\x71\x62\x7f\x3f\xf9\x02\x99\xbe\xa1\x28\x71\xea\x9d\xbc\x82\xef\xa0\xd8\x1b\x0b\x5d\xc0\x88\x53\x77\xfe\xa0\x1d\xf1\xcb\xf4\xbe\x39\x53\x1a\x7a\xf7\x31\x14\x35\x94\x2f\x1c\xb0\x89\x68\x30\x80\x41\xdf\x38\xe7\x05\xe7\x86\xaf\x14\x51\x0d\x62\xee\x5d\x2a\x21\x34\xce\x25\x88\xd8\x3b\x52\x23\x6e\xbf\xb3\x9c\x35\x83\xc7\x46\x4a\x40\xad\x8d\xad\x83\x4c\x9f\x84\x4b\x9e\x97\xf5\x6b\xdd\xd3\xd3\xfc\x2b\xa8\x5c\xc4\xe3\x6a\x27\xf3\xa0\xbf\x17\x8a\x32\x91\xc7\x5b\x01\xd3\x90\x99\x92\xdd\x2a\xb9\x6a\x53\xc3\x64\x13\x87\x12\xd1\x07\xa0\xb8\x6a\x98\x70\x7d\xda\x73\x1a\xe9\x14\x21\xaf\x31\xbc\xe0\x72\x64\x42\x79\x5d\x71\x79\x7e\xf7\x7c\x5c\x40\xb5\x63\xb6\x60\x73\xe4\x09\x6d\x6f\x24\xe4\x85\xd5\xc6\xd0\x01\x73\xe0\x1f\xf1\x4e\xcb\x00\x18\x39\x29\xae\x4a\x82\x39\x90\x87\xbb\x9a\x1a\x18\x8e\x25\xe8\x71\x91\x95\x51\xc7\x19\x93\xbe\xd1\x68\x1d\xf1\xbf\xe9\x5d\x0d\x3e\x0a\x14\x39\x91\xb1\x50\x3a\x75\x9e\x05\x59\x3b\xcf\x71\x0f\x6c\x09\xc5\xd2\xf3\xc0\xe5\xe5\xca\x6b\x70\x71\x0f\x79\x8e\xed\x4a\xe3\x03\xdc\x2b\xff\x23\xb2\x12\x5a\x7d\x10\x55\xd6\x15\x67\xdf\xc1\xe3\xc3\x23\x90\x9a\xc0\x7f\x9b\xb9\x11\xc0\xcf\x35\xca\xbf\x76\xff\x7c\xe0\x1b\xa0\x77\x39\x7d\x19\x29\x41\xa0\x0b\xfe\x7d\x45\xad\x2b\x79\xa8\x97\xf2\x33\x00\x00\xff\xff\x5c\xef\x50\x14\x9c\x04\x00\x00")

func deployCluster_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCluster_roleYaml,
		"deploy/cluster_role.yaml",
	)
}

func deployCluster_roleYaml() (*asset, error) {
	bytes, err := deployCluster_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/cluster_role.yaml", size: 1180, mode: os.FileMode(436), modTime: time.Unix(1585740871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0e\x80\x30\x08\x00\xc0\x9d\x57\xf0\x01\x07\x57\x36\xdf\x60\xe2\x4e\x28\x03\x69\x0a\x4d\xc1\xfa\x7d\x8f\xa7\x3d\xba\xd2\xc2\x09\xf7\x09\xdd\xbc\x11\xde\xba\xb6\x89\x5e\x22\xf1\x7a\xc1\xd0\xe2\xc6\xc5\x04\x88\xce\x43\x09\x2d\xcb\xe2\xf8\x62\xf5\x9c\x2c\x0a\x7f\x00\x00\x00\xff\xff\x94\xa0\xb7\x3f\x46\x00\x00\x00")

func deployService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployService_accountYaml,
		"deploy/service_account.yaml",
	)
}

func deployService_accountYaml() (*asset, error) {
	bytes, err := deployService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/service_account.yaml", size: 70, mode: os.FileMode(436), modTime: time.Unix(1568823862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4f\x8f\xda\x30\x10\xc5\xef\xf9\x14\x23\xee\x09\xa0\x4a\x55\xe5\x5b\x04\x54\x3d\xb4\x10\x51\xd4\x1e\x57\x83\x33\x80\x85\xff\xad\xed\x84\xcd\xb7\x5f\x99\x7f\x0a\x21\xb0\xcc\x29\xf1\xbc\x37\xbf\xb1\x1f\x5a\xf1\x8f\x9c\x17\x46\x33\x40\x6b\xfd\xb0\x1e\x27\x7b\xa1\x4b\x06\x53\xb2\xd2\x34\x8a\x74\x48\x14\x05\x2c\x31\x20\x4b\x00\x24\xae\x49\xfa\xf8\x05\xd1\xc0\x40\xf8\x20\x4c\x7a\x30\x6e\xef\x2d\x72\x3a\x36\xea\xcb\xc8\x7a\x94\x8d\xb2\x6f\xa9\xa6\x8f\x90\x22\x5f\x7f\xff\xb1\x2e\xd3\x52\xb8\xd0\x24\x00\x1a\x15\xdd\xdb\xbd\x25\x1e\xa7\x3b\xb2\x52\x70\xf4\x0c\xc6\x09\x80\x27\x49\x3c\x18\x77\xe2\x2a\x0c\x7c\xf7\xbb\xb5\xc8\x93\x55\x5e\x5c\x26\x90\xb2\x12\x03\x9d\x01\xad\x0b\xc7\x92\x37\xac\xa7\xb4\x17\x79\xb1\xfa\x1f\x20\x76\x2e\x8f\x10\x8b\x1b\x1d\x50\x68\x72\x2d\x7e\x0a\xe8\xb6\xad\xff\xd3\x99\x27\x57\x53\xeb\x8c\x1b\xa5\x50\x97\x5d\x99\xd8\xb7\x45\xa4\xeb\xae\xe0\xb4\xd7\xff\x7c\x35\xf9\xf5\x36\xcf\xff\xcc\xfe\x16\xf9\x64\x76\xa3\x01\xa8\x51\x56\xc4\x60\x30\xe8\xf5\x16\x8b\xe9\xd1\xd9\x67\xfa\xe9\x8c\x62\x9d\x06\xc0\x46\x90\x2c\x97\xb4\xb9\xef\x9c\x7b\x05\x86\x1d\xbb\x06\x93\x45\x4e\x2f\x7a\x51\xcc\x96\xf9\x6a\xb1\x7c\xc8\x7f\x1c\x1c\x80\x50\xb8\x25\x06\xef\x15\x36\x99\x30\x43\x85\xc2\x07\x87\xc3\x8e\x81\x7d\x15\xec\x75\x54\x51\x49\x59\x18\x29\x78\xc3\x20\x97\x07\x6c\x7c\x4b\xf1\x38\x7e\x38\x46\x29\x38\xe5\x9c\x9b\x4a\x87\x79\xaf\xf2\x33\x00\x00\xff\xff\xea\x30\x7f\x51\xbb\x03\x00\x00")

func deployOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployOperatorYaml,
		"deploy/operator.yaml",
	)
}

func deployOperatorYaml() (*asset, error) {
	bytes, err := deployOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/operator.yaml", size: 955, mode: os.FileMode(436), modTime: time.Unix(1593678008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployOperatorTplYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x5d\x6f\xf2\x3a\x0c\xbe\xe7\x57\x58\x68\xb7\x63\xda\x6d\xee\xaa\xc1\xe1\xa0\x7d\x80\x4a\xb5\xa3\x73\x35\x99\xd4\xd0\xbc\xa4\x49\x96\xa4\xa0\x6a\xe2\xbf\xbf\x4a\xd7\x0e\xe8\xda\x75\xbe\xab\x63\xf9\xf9\xa8\xed\xbd\x50\x29\x83\x84\x72\x23\xd1\xd3\x08\x8d\x78\x25\xeb\x84\x56\x0c\x7c\x9d\x9c\x68\x43\xca\x65\x62\xeb\x27\x42\xdf\x1d\xee\x47\x06\x2d\xe6\xe4\xc9\x3a\x36\x02\xb8\x05\x85\x39\x31\x58\x3c\xce\xde\xa6\xcb\x87\xc7\x59\xfc\x16\xcf\xe6\x8b\x75\x12\xff\x3f\x02\x00\x48\xc9\x71\x2b\x8c\xaf\x7a\x8e\xa7\x9a\xef\xc9\x82\xa5\x9d\x70\xde\x96\x70\xcc\xc8\x12\xa4\x64\xa4\x2e\x29\x05\x91\xe3\x8e\x40\x38\xc0\x03\x0a\x89\x1b\x49\xe3\xaa\x89\xa5\xf7\x42\x58\x4a\x19\x78\x5b\x50\x95\x3a\xa0\x2c\x88\xc1\x7b\x81\xe5\x44\xe8\x3e\x22\xab\xe5\x7a\x91\x2c\x3b\xa9\xc4\x64\xb4\x13\x5e\xdb\x12\x84\x82\x63\x26\x78\x06\x3e\xa3\x9a\x03\x47\x05\x1b\x82\xad\x2e\x54\x3a\xc4\x21\xc7\x20\x06\x5b\x1c\x16\xcf\xd1\x7c\xf6\xf6\x12\x3d\xcf\x3a\xc0\x93\x8c\xaa\x52\xd0\xdb\x0b\xd0\xa3\xf0\x19\x88\x3d\xc1\x46\x28\xb4\xe5\x10\xae\x70\x5e\xe8\xdb\xa3\xb6\x7b\x67\x90\x53\x27\x7e\x12\xcd\x7b\xe0\x3d\xee\xae\xd1\xbd\x0e\x8a\x0b\x47\x83\x82\xc3\x58\x38\xdf\xc2\x7b\x9d\xc5\xeb\xc5\xf2\xa5\x07\xed\xf0\x39\x56\x0d\xe2\xef\x04\x7e\xc3\xf9\x2f\x4a\x1e\xfe\xad\x3c\x5d\xaf\xa2\x87\x9f\x8c\xad\x1c\x09\x92\x8e\xe8\x79\x36\x81\x27\xc2\x03\x01\xe5\xc6\x97\xb0\xd5\x16\xb8\x2c\x9c\x27\x0b\x47\x91\x52\x5d\xd3\x66\xb3\x45\xe9\xae\xe8\x8c\xc7\x23\xbd\xf9\x43\xdc\xd7\x83\xff\xb9\x3c\xd3\x6a\x78\x73\x52\xbe\xaa\xbd\x5c\x21\x34\xc6\x85\x8d\x09\xf9\x9c\x3c\xa6\xe8\x91\x55\x5f\x50\x0b\xfa\xfe\x0b\x43\x48\xdc\x90\x74\x4d\x65\xe8\x69\xfa\x4a\xa1\x71\x96\xc1\xcd\xc7\xc5\x6f\x38\x55\xef\xce\x10\x6f\xda\x58\x32\x52\x70\x74\x0c\xee\xeb\x8c\x23\x49\xdc\x6b\x7b\x06\xca\x83\x11\x4f\x2d\xf4\x01\xfc\x9f\x19\xc0\xd7\x1d\xb9\x40\x69\x59\x31\x64\x47\x97\x25\xbf\xa0\x35\x44\xec\xda\x9e\x4f\x43\xec\x41\x70\x8a\x38\xd7\x85\xf2\x2f\x03\x94\xb8\x56\x1e\x85\xaa\xef\xe0\x39\x6e\x07\xc5\x84\xa8\x76\xae\x61\xd6\x3a\x9c\xa7\xbb\x56\xba\x39\x63\xcd\xc3\xf9\xb6\x9c\xd8\x65\x26\x89\xe6\xa7\x16\x0e\xd7\x79\x8e\x2a\x65\xad\x74\xa0\x29\xf6\x6d\x52\x68\x77\xae\xab\x32\x18\xd3\x29\x60\x55\x48\xb9\xd2\x52\xf0\x92\x41\x24\x8f\x58\xba\x56\x15\xa9\x43\x57\xc3\xfe\x75\xbe\x8e\x66\xf3\x6e\x3e\x5a\xb5\xa7\x71\x6f\xd7\xd5\x72\x7a\x3e\xbb\x1d\xed\xfe\xb1\x3a\xff\xce\x29\xc4\x56\x90\x4c\x63\xda\x76\xbf\xd6\xef\x2b\xf4\x19\xfb\x9a\xe1\x49\xc0\xec\xa5\xb2\x5c\xcd\xe2\x28\x59\xc6\x3f\xf2\x61\x30\x6e\x8d\xca\x78\xf4\x37\x00\x00\xff\xff\xd1\xef\x0d\x97\x98\x07\x00\x00")

func deployOperatorTplYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployOperatorTplYaml,
		"deploy/operator.tpl.yaml",
	)
}

func deployOperatorTplYaml() (*asset, error) {
	bytes, err := deployOperatorTplYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/operator.tpl.yaml", size: 1944, mode: os.FileMode(436), modTime: time.Unix(1593615600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\xc1\x8e\xd4\x30\x0c\xbd\xf7\x2b\xa2\xbd\xac\x84\xd4\xae\xb8\xa1\xfe\x00\x37\x0e\x08\x71\xf7\xa6\xee\xac\x35\x49\x1c\xd9\x4e\x11\xf3\xf5\x28\x9d\xc2\x74\xa0\x1d\x54\x69\x7b\x6a\x1c\xdb\xcf\xef\xf9\x05\x32\x7d\x47\x51\xe2\xd4\x3b\x79\x05\xdf\x41\xb1\x37\x16\xba\x80\x11\xa7\xee\xfc\x49\x3b\xe2\x97\xe9\x63\x73\xa6\x34\xf4\xee\x2b\x07\x6c\x22\x1a\x0c\x60\xd0\x37\xce\x79\xc1\x39\xf3\x1b\x45\x54\x83\x98\x7b\x97\x4a\x08\x8d\x73\x09\x22\xf6\x8e\xd4\x88\xdb\x1f\x2c\x67\xcd\xe0\xb1\x91\x12\x50\x6b\x61\xeb\x20\xd3\x67\xe1\x92\xe7\x63\xfd\x5a\xf7\xf4\x34\xff\x0a\x2a\x17\xf1\xb8\xba\xc9\x3c\xe8\x9f\x83\xa2\x4c\xe4\xf1\x16\xc0\x34\x64\xa6\x64\xb7\x48\xae\xa4\xd4\x30\xd9\xc4\xa1\x44\xf4\x01\x28\xae\x0a\x26\x5c\x67\x7b\x4e\x23\x9d\x22\xe4\x35\x86\x17\x5c\x52\x26\x94\xd7\xd5\x2c\xcf\x1f\x9e\x8f\x13\xa8\x72\xcc\x12\x6c\xb6\x3c\xa1\xed\xb5\x84\xbc\x4c\xb5\xd1\x74\xc0\x1c\xf8\x67\xbc\xe3\x32\x00\x46\x4e\x8a\xab\x90\x60\x0e\xe4\xe1\x2e\xa6\x06\x86\x63\x09\x7a\x9c\x64\x9d\xa8\xe3\x8c\x49\xdf\x68\xb4\x8e\xf8\xff\xe3\x5d\x05\x3e\x0a\x14\x39\x91\xb1\x50\x3a\x75\x9e\x05\x59\x3b\xcf\x71\x0f\x6c\x31\xc5\x52\xf3\x40\xe5\x65\xe5\xd5\xb8\xb8\x87\x3c\xdb\x76\xc5\xf1\x01\xee\x75\xfe\x23\xb4\x12\x5a\x7d\x10\x95\xd6\x15\x67\x5f\xc1\xe3\xcd\x23\x90\x9a\xc0\xbb\xf5\xdc\x30\xe0\x97\x6a\xe5\xdf\xb7\x7f\x3f\xf0\x0d\xd0\x3b\x9f\xbe\x8c\x94\x20\xd0\x05\xff\x5d\x51\xeb\x4a\x1e\xea\x52\x7e\x05\x00\x00\xff\xff\x2e\xd1\xd4\xd7\x95\x04\x00\x00")

func deployRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRoleYaml,
		"deploy/role.yaml",
	)
}

func deployRoleYaml() (*asset, error) {
	bytes, err := deployRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/role.yaml", size: 1173, mode: os.FileMode(436), modTime: time.Unix(1593703185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsMaistraIo_sessions_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xc1\x8e\xe3\x36\x0f\xbe\xe7\x29\x08\xfc\x87\xbd\xfc\x49\x30\xe8\xa5\xf0\x6d\x31\xed\x61\xd0\x6d\x31\x98\x14\x7b\x67\x2c\xda\x61\xd7\x96\x54\x89\xca\x36\x2d\xfa\xee\x85\x24\x3b\x71\x1c\x3b\x99\xcc\x62\x81\x62\xcb\x5b\x28\x8a\xa4\xbe\x8f\xa4\x14\xa3\xe5\x8f\xe4\x3c\x1b\x5d\x00\x5a\xa6\x3f\x84\x74\xfc\xe5\x57\x9f\xbe\xf7\x2b\x36\xeb\xfd\xc3\x96\x04\x1f\x16\x9f\x58\xab\x02\x1e\x83\x17\xd3\xbe\x90\x37\xc1\x95\xf4\x03\x55\xac\x59\xd8\xe8\x45\x4b\x82\x0a\x05\x8b\x05\x80\xc6\x96\x0a\xf0\xe4\xb3\xa3\x16\xd9\x8b\xc3\x15\x9b\x85\xb7\x54\x46\x8b\xda\x99\x60\x0b\x18\xac\xe4\x5d\x3e\x2e\x02\xe4\x58\x9b\xec\x20\x69\x1a\xf6\xf2\xd3\x50\xfb\x81\xbd\xa4\x15\xdb\x04\x87\xcd\x29\x5c\x52\x7a\xd6\x75\x68\xd0\x1d\xd5\x0b\x00\x5f\x1a\x4b\x05\xfc\x12\xc3\x58\x2c\x49\x45\x5d\xd8\xba\xee\x2c\x5d\x68\x2f\x28\xc1\x17\xf0\xd7\xdf\x0b\x80\x3d\x36\xac\x30\x9e\x2f\x2f\x1a\x4b\xfa\xfd\xf3\xd3\xc7\xef\x36\xe5\x8e\x5a\xcc\x4a\x00\x45\xbe\x74\x6c\x93\x5d\x9f\x1f\xb0\x07\xd9\x11\x64\x4b\xa8\x8c\x4b\x3f\xfb\x2c\xe1\xfd\xf3\xd3\xaa\xdb\x6e\x9d\xb1\xe4\x84\xfb\x14\xa2\x0c\x68\x39\xea\x46\x81\xde\xc5\x4c\xb2\x0d\xa8\x48\x04\xe5\x88\xfb\xac\x23\x05\x3e\xc7\x36\x15\xc8\x8e\x3d\x38\xb2\x8e\x3c\x69\x49\x27\x1a\xb8\x85\x68\x82\x1a\xcc\xf6\x37\x2a\x65\x05\x1b\x72\xd1\x09\xf8\x9d\x09\x8d\x82\xd2\xe8\x3d\x39\x01\x47\xa5\xa9\x35\xff\x79\xf4\xec\x41\x4c\x0a\xd9\xa0\x50\x47\x47\x2f\xac\x85\x9c\xc6\x26\x62\x18\xe8\xff\x80\x5a\x41\x8b\x07\x70\x14\x63\x40\xd0\x03\x6f\xc9\xc4\xaf\xe0\x67\xe3\x08\x58\x57\xa6\x80\x9d\x88\xf5\xc5\x7a\x5d\xb3\xf4\x85\x58\x9a\xb6\x0d\x9a\xe5\xb0\x2e\x8d\x16\xc7\xdb\x20\xc6\xf9\xb5\xa2\x3d\x35\x6b\xcf\xf5\x12\x5d\xb9\x63\xa1\x52\x82\xa3\x35\x5a\x5e\xa6\xc4\xb5\xe4\x22\x54\xff\x3b\x32\xfd\x6e\x90\xa9\x1c\x62\x51\x78\x71\xac\xeb\xa3\x3a\xd5\xdf\x2c\xee\xb1\x0e\x23\xbd\xd8\x6d\xcb\xf9\x9f\xe0\x8d\xaa\x88\xca\xcb\x8f\x9b\x5f\xa1\x0f\x9a\x28\x38\xc7\x3c\xa1\x7d\xda\xe6\x4f\xc0\x47\xa0\x58\x57\xe4\x32\x71\x95\x33\x6d\xf2\x48\x5a\x59\xc3\x5a\xd2\x8f\xb2\x61\xd2\xe7\xa0\xfb\xb0\x6d\x59\x22\xd3\xbf\x07\xf2\x12\xf9\x59\xc1\x23\x6a\x6d\x04\xb6\x04\xc1\x2a\x14\x52\x2b\x78\xd2\xf0\x88\x2d\x35\x8f\xe8\xe9\xab\xc3\x1e\x11\xf6\xcb\x08\xe9\x6d\xe0\x87\x53\xe4\xdc\x30\xa3\x75\x54\xf7\x83\x64\x92\xa1\xae\x05\x37\x96\xca\xb3\xce\x50\xe4\xd9\xc5\xea\x15\x14\x8a\x35\xdf\x19\xae\x06\x8e\xa6\x9a\x31\x8a\xa3\xea\x5c\x01\xc0\x42\xad\x1f\x2b\x47\xa9\xbc\x50\x75\x25\x85\x38\x15\x30\x0d\xab\x26\xd6\x4f\x45\x8e\x74\x49\x17\x1e\x01\x3e\xb3\xec\x58\xe7\x81\x72\x99\xf3\xf5\xcc\xb3\xa0\xab\x27\xf5\x00\xa8\x54\x1a\xe1\xd8\x3c\x5f\xf5\x00\x73\xa4\x5d\x1a\x8c\xc8\x3a\x49\xba\x19\xae\x6c\x9c\xf5\x1c\xaf\x09\xa1\xfa\xf0\x86\xcd\x57\x52\xca\x4b\xe8\x1c\x1e\xce\xc9\x36\x41\x2e\xf2\x3c\xe7\x35\x5a\x9c\x31\xdb\x67\x98\x48\xdd\x99\xcf\x49\x29\x0e\xab\x8a\xcb\x38\x2d\x92\x4f\x75\x99\x5d\x9e\xa0\x2f\x54\x8d\x19\xbd\xc6\xe7\x1c\x8e\xb7\x81\xb8\x77\x53\x9a\x6d\x77\xee\x9a\x41\x7c\xba\x91\xf3\x7d\x7b\xab\x95\x93\xd5\x19\xde\x66\xeb\xe3\xb4\x7c\x73\x37\x5f\xa0\xfa\xca\x76\x7e\x55\x2a\x51\xcb\x5a\xf1\x9e\x55\xc0\x66\x02\xbd\x09\xbe\xbf\xf1\x0e\x1e\xbd\xb3\xc6\x32\x83\x7e\x96\x31\x07\xfd\xfb\x73\x9a\x85\x63\x24\x68\x43\x24\x44\xad\x4b\x47\x38\xd5\x7c\xbd\xa0\x07\x8b\x4e\x7a\xe6\x26\xc9\xc9\x72\x9d\xa2\xce\x5b\x29\xa3\x77\xdb\x58\x6e\x92\x00\x13\x8f\x90\x37\x39\x99\xa7\xeb\x0e\x27\xf1\xd0\xd7\x9c\xdc\x53\x7f\x77\x84\xbd\x59\x8b\xaf\x32\x99\x9b\xf1\x59\xbe\xe0\x5e\x01\x10\x74\x35\xc9\x17\x17\xf4\x07\xdc\x52\x43\x6a\x58\xd7\xe9\x75\x39\x54\xc4\x07\x40\x36\xf4\xdf\x4a\x69\x36\xe9\x34\xff\xd6\xba\xfa\x0f\xb4\x4e\xfc\x97\x10\x1f\xa3\x73\xf1\x96\x1d\x45\x5f\xa3\xf3\xde\xf0\x28\x4b\x97\xeb\x38\xd7\x19\x34\x26\xdc\x8f\x54\xfb\xfe\xa3\xc7\xfe\x01\x1b\xbb\xc3\x87\x93\x2e\x11\xb0\xec\xbe\x62\x0c\x96\x01\xf2\x05\x53\x80\xb8\x40\xdd\xd7\x02\xe3\xb0\xa6\x4e\xf3\x4f\x00\x00\x00\xff\xff\xb8\x1e\x54\xf0\x4c\x11\x00\x00")

func deployCrdsMaistraIo_sessions_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsMaistraIo_sessions_crdYaml,
		"deploy/crds/maistra.io_sessions_crd.yaml",
	)
}

func deployCrdsMaistraIo_sessions_crdYaml() (*asset, error) {
	bytes, err := deployCrdsMaistraIo_sessions_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/maistra.io_sessions_crd.yaml", size: 4428, mode: os.FileMode(436), modTime: time.Unix(1593769349, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCrdsMaistraIo_sessions_crYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8b\xc1\x0d\xc2\x30\x10\x04\xff\xae\xe2\x1a\x30\x28\x5f\xb7\x81\xc4\x7f\x85\x17\x62\x48\xce\x96\xef\x12\x89\xee\x91\x49\x7e\xab\x9d\x19\xb4\x72\x67\xb7\x52\x35\xc9\x8a\x62\xde\x71\x29\xf5\xba\x4f\x58\xda\x8c\x29\x7c\x8a\xe6\x24\x37\xda\x50\xc2\x4a\x47\x86\x23\x05\x11\xc5\xca\x24\x4e\xf3\x68\x27\xb6\xc6\xc7\x40\xbd\x6e\xce\x31\x44\xfc\xdb\x98\x64\x26\x32\xfb\xff\x38\x32\x6a\x8e\x9b\x9d\xd7\x8e\x65\x63\x92\x37\xac\xea\xa8\xf9\x3c\xda\x78\xca\x1d\x5e\xf4\x65\x71\x9f\xc2\x2f\x00\x00\xff\xff\x83\x49\x12\xb0\xaf\x00\x00\x00")

func deployCrdsMaistraIo_sessions_crYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCrdsMaistraIo_sessions_crYaml,
		"deploy/crds/maistra.io_sessions_cr.yaml",
	)
}

func deployCrdsMaistraIo_sessions_crYaml() (*asset, error) {
	bytes, err := deployCrdsMaistraIo_sessions_crYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/crds/maistra.io_sessions_cr.yaml", size: 175, mode: os.FileMode(436), modTime: time.Unix(1593601479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExamplesBookinfoSession_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\xb1\xaa\xc3\x30\x0c\x45\x77\x7f\x85\xb6\xc0\x83\xf8\xd1\xad\xf8\x07\xba\x77\xe8\x7e\x93\x08\x2a\x92\x58\x46\xb2\x33\xf4\xeb\x8b\x33\x94\x68\x3b\x47\x97\x83\x22\x2f\x36\x17\xcd\x89\x6c\xc2\x1c\xd1\xea\x5b\x4d\x3e\xa8\xa2\x39\xae\x77\x8f\xa2\xff\xc7\x2d\xac\x92\x97\x44\x4f\xdd\x38\xec\x5c\xb1\xa0\x22\x05\xa2\x8c\x9d\x13\x39\x7b\x4f\x78\xb0\xb6\xb1\x77\x3f\x12\x8a\x3c\x4c\x5b\x39\xb1\xdf\x48\x3b\xc4\xab\x21\x8a\x9e\xca\xd8\xb5\xd9\xcc\x97\xc5\x2f\xd4\xf1\x60\x9b\x2e\xbf\xe1\x6f\x08\xdf\x00\x00\x00\xff\xff\xe9\xef\x57\x37\xaf\x00\x00\x00")

func deployExamplesBookinfoSession_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployExamplesBookinfoSession_roleYaml,
		"deploy/examples/bookinfo/session_role.yaml",
	)
}

func deployExamplesBookinfoSession_roleYaml() (*asset, error) {
	bytes, err := deployExamplesBookinfoSession_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/examples/bookinfo/session_role.yaml", size: 175, mode: os.FileMode(436), modTime: time.Unix(1568823866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployExamplesBookinfoSession_rolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xb1\xae\xc2\x30\x0c\x85\xe1\x3d\x4f\xe1\x17\xb8\xbd\x62\x43\x19\x59\xd8\x2b\xc1\x8a\xdc\xe6\x00\xa6\x6d\x1c\xd9\x69\x07\x9e\x1e\x55\x08\x55\x62\x60\xff\xfd\xf9\x70\x91\x33\xcc\x45\x73\x24\xeb\xb8\x6f\x78\xae\x77\x35\x79\x72\x15\xcd\xcd\xb0\xf7\x46\xf4\x7f\xd9\x85\x41\x72\x8a\xd4\xea\x88\x83\xe4\x24\xf9\x16\x26\x54\x4e\x5c\x39\x06\xa2\xcc\x13\x22\x39\x7c\x95\x2e\x09\x0b\x46\x2d\xb0\xe0\x73\xf7\x40\x5f\x7d\x6d\xfe\xe8\x6d\x9c\x1c\x16\x88\x3e\x47\x5b\x6c\x3a\xa2\xc5\x75\x6d\xb7\x6f\xdf\xb8\x07\x22\x2e\x72\x34\x9d\xcb\x8f\xc9\xaf\x00\x00\x00\xff\xff\xa2\x4b\x32\x0d\xd8\x00\x00\x00")

func deployExamplesBookinfoSession_rolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployExamplesBookinfoSession_rolebindingYaml,
		"deploy/examples/bookinfo/session_rolebinding.yaml",
	)
}

func deployExamplesBookinfoSession_rolebindingYaml() (*asset, error) {
	bytes, err := deployExamplesBookinfoSession_rolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/examples/bookinfo/session_rolebinding.yaml", size: 216, mode: os.FileMode(436), modTime: time.Unix(1568823862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xdb\x46\x13\xbe\xeb\x57\x0c\x74\x31\xf0\x22\x54\xe2\xb7\x89\x1b\xf0\x54\x25\x4d\xdb\xa0\xb5\x2d\xc4\x41\x73\x08\x8c\x62\xb4\x1c\x49\x1b\xed\x57\x77\x87\x74\x94\x34\xff\xbd\xd8\x25\x25\x91\x94\x64\xc9\xad\xd1\xbd\x90\x9c\x9d\xd9\x79\xe6\x73\x87\xe8\xe4\xef\xe4\x83\xb4\x26\x07\xeb\xc8\x23\x5b\x1f\x46\xc2\x7a\xb2\xf1\xa1\x9f\x56\xe7\xa8\xdc\x02\xcf\x07\x4b\x69\x8a\x1c\x5e\xab\x32\x30\xf9\x1b\xf2\x95\x14\xd4\x88\x0e\x34\x31\x16\xc8\x98\x0f\x00\xd0\x18\xcb\xc8\xd2\x9a\x10\x3f\x01\x50\xe9\x8c\x3e\xa3\x76\x8a\x42\x0e\x7f\x65\x89\x08\xf0\xb1\x79\x02\x7c\xdd\xbc\x01\x0c\xb7\x80\x86\x39\x0c\x35\xca\xc0\x1e\x47\xd2\x6e\x80\x0c\x9f\xb4\xd9\x23\xaa\xc8\x78\x43\x21\xc9\x74\x36\xd7\xb0\x86\x79\x47\x07\xc0\xd0\xa0\xa6\x28\xc6\x14\x38\x0b\x8d\x6c\x8b\xe5\x5b\xe7\x9c\xe0\x48\xec\x9e\xe1\x69\x36\xcc\x5b\x66\xec\x1a\xd3\x53\xe6\x91\xa5\x99\x87\xac\x3a\x1f\xf6\x98\xbe\x75\xbe\x6f\x9f\xf4\x14\xd9\x92\x69\x47\x7f\xeb\x60\x32\x45\x56\x06\xf2\xc3\x27\x7d\x0e\x5e\xb9\xc4\xb1\x20\x2c\xf6\xed\x57\xa8\xca\xc4\xf0\x09\x43\xd7\x03\x5d\x50\xdb\xf7\xf5\xdb\x6d\x7a\x0a\x74\x38\x95\x4a\xb2\x8c\xb1\x7d\x85\x41\x0a\x78\x6b\x02\xa3\x52\x03\x80\x88\x2f\x07\x19\x58\xda\xec\xce\xfa\x65\x70\x28\x68\x54\x3d\x1b\x3d\x1b\x7d\x97\x19\xfa\xcc\xd9\x8b\xef\xa7\xcf\x5e\x5e\xbc\xc8\x0a\xe9\x79\xd5\x48\x24\xae\x1c\x9c\x42\x41\x0b\xab\x0a\xf2\x83\x18\x80\x94\x5b\x4e\x86\x3a\xf3\x0a\x9a\x49\x23\xeb\x2c\x83\xaf\x11\x94\x28\x03\x5b\xed\x29\xd8\xd2\x77\xf7\x13\x52\x7b\x67\xa8\xa8\x5f\x33\x28\x28\x08\x2f\x1d\xa7\xb4\x6f\x52\x07\x64\x00\x5e\x10\xdc\x88\x05\x69\x84\x99\xf5\xe9\xb3\x49\x8e\x00\xe3\xc9\xdb\x51\x63\x7b\x5d\x0a\x8d\x5c\x43\xab\x6d\x5d\x73\x8f\xb6\x89\xdb\xec\x57\xeb\x2a\xdb\x14\x14\x40\x21\x83\x53\xb8\xba\x4a\xa2\x6f\xa3\x9b\xe0\xc3\xda\x4d\x03\x00\x29\xac\x89\x88\x33\x98\x62\xa0\x8b\xe7\xa9\xc2\x60\x58\x47\x49\x53\x21\x31\x86\xb7\xa1\xc8\xda\xeb\xb5\x85\x6b\x7f\xc5\x55\x90\x53\x76\xa5\xc9\x70\x58\x93\xb2\xfd\x91\xd9\xc4\xb8\x2d\x1e\x97\x27\xa7\xa4\xc0\x90\xc3\x79\x8b\x1a\x48\x91\x60\xeb\xf3\x4e\xd6\x68\x64\xb1\xf8\x0d\xa7\xa4\x42\xde\xcb\x36\x74\xee\xb0\xce\xbe\x97\x5a\x49\x82\x62\x7a\xf1\x72\x5a\x6c\x92\x64\x03\x80\x3d\x32\xcd\x57\x4d\x02\xac\x17\x93\x76\x0a\x99\x7a\xb8\x5a\x2d\xaa\xbd\xd4\x5e\xa8\x27\x81\x7d\x20\x5c\x80\x03\x15\xd1\xe1\xe9\xfb\x3e\x2e\x61\x0d\xa3\x34\xe4\x77\x70\x66\x80\x7e\xbe\x07\x7d\x06\xb1\x4e\x76\x01\x0b\xab\x35\x9a\x62\x9f\x80\x5c\xee\xb2\x93\xa9\xf6\xb1\xd6\x56\x7c\x18\xbf\x7f\xfd\xcb\x1f\x57\xe3\xcb\x37\x37\x93\xf1\xeb\x37\x3b\x7c\x00\xa9\xbb\xfc\xe4\xad\xde\x3d\x24\xae\x99\x24\x55\xbc\xa3\xd9\xfe\xdd\x66\x7f\x82\xbc\xc8\x37\xd1\x1b\xb5\x6e\x97\x8f\x67\x56\xe9\x11\xa3\x9f\x13\x5f\xad\xfb\x46\x38\xbb\x3d\x08\x78\x72\xfd\x63\x82\xfb\xdf\x20\x8d\x3a\x0f\x42\xb9\x9e\xbc\x79\x37\x7e\x7f\xfd\xee\x5e\x3c\xc7\xf3\x4f\x6a\x9c\x53\x0e\x7f\x96\xb8\x8a\x57\x64\xd3\x74\x9e\xf6\xc4\xf2\x53\xb3\xb3\x39\x70\x52\x2a\x35\xb1\x4a\x8a\x55\x0e\x63\x75\x87\xab\xb0\xc3\x77\x3c\x8f\x21\xf5\x8d\xba\x19\x87\x5e\x85\x42\xea\x1e\xa9\x8f\x8f\x85\xb0\xa5\xe1\xab\x7b\xce\x73\xe4\xb5\xac\xdb\xea\xb6\x81\xf9\x32\x4e\x13\x83\xad\x5f\xd1\xc9\x9f\xbd\x2d\x5d\xa7\x18\x32\xd8\xe9\xc3\x5d\x5c\x1d\xde\x75\xf3\x6e\x11\x2b\xf2\xd3\x1e\xd7\xd9\xff\xce\x06\xf7\x19\xd1\x3b\xe5\x74\xa8\xc3\xe1\x71\x88\xce\x16\xa1\x87\x39\x21\xe8\x12\xc9\x14\xce\x4a\xc3\x5d\xaa\x8b\xcd\x2a\x30\x19\xae\xac\x2a\x35\x09\x85\x52\xf7\x04\x2b\xea\x4b\x09\x6b\x66\x72\xae\xd1\xf5\xf5\x0a\x4f\xfc\x00\x57\xfd\x2b\xb3\x37\x63\xc1\x11\x85\x73\xe2\xe3\x0a\xd1\x75\x6c\x39\xa0\xb2\x75\x6d\x76\xe9\x48\xda\x9a\x40\x3d\xf2\xfa\x8a\xec\xd3\x03\x23\xd3\xac\x54\xe1\x71\x9c\x15\xb1\x8f\xac\x23\x13\x16\x72\xc6\x27\x65\xf5\xd6\x90\x3a\x94\x8f\x01\x43\x5b\x23\xd9\x7a\x69\xe6\xad\x5f\x85\x53\x0a\x2c\x25\x6b\x23\xfd\x80\x58\xa6\x44\xf4\x84\x4c\xc7\xb1\xa5\x26\xd2\xf2\xd1\x49\xc8\xda\x56\xff\x73\xb7\x18\xe2\xd8\xbc\xa2\x5b\x6a\x14\xa7\xc4\xe7\x71\x54\x3f\xa4\xcf\x3d\x8e\xc6\x03\x65\x94\x6e\xe2\x3d\x11\xd9\x7b\x4d\x1c\xaf\xbd\xa7\x33\x69\x50\xc9\x2f\x74\x2c\x5d\x4a\x57\xb4\xd3\xe3\xd4\xeb\x65\x3b\x43\x6e\x95\x6e\xa7\xe9\x4b\x5b\xd4\xd8\x32\x08\xa5\x73\xd6\x33\x15\x39\xb0\x2f\x6b\xe1\x7a\xfc\xbe\xbe\x33\x9b\xf1\xe3\x08\xeb\x8d\x34\x73\x45\x07\xb9\x67\xa8\x42\x9b\xfd\xb2\x54\x2c\x4f\x3d\x7b\xac\xd4\x55\xbb\x4d\x2e\x69\x75\x67\x7d\xd1\xc0\x4f\xb6\xa7\x37\x26\x45\xce\x53\x20\xd3\x1c\xa9\xac\x40\x05\x05\x55\xa4\xac\x6b\xec\x8f\x6c\x21\xfe\xad\x0e\xe2\x44\x2f\xdb\xe3\x67\x06\xa4\x51\xaa\x1c\x30\x28\x5c\xfe\xe0\xa9\x58\xe0\xb6\xca\xea\xc1\x60\x1c\xb7\xe0\x57\x53\x72\x20\xd3\x96\x99\xa2\x67\x1b\xbe\xec\x97\x7a\x55\x6f\xc2\x25\x7e\x0a\xb8\x4c\x9a\xb9\xf4\x92\x57\x39\xa4\x5f\xa6\x01\x80\xf3\xb6\x92\x05\xf9\x66\xa0\x88\x5d\x17\xd3\x7c\x71\xdf\x4f\xe6\xf9\xf3\xff\x5f\x88\xe7\xd1\xd8\xcd\xbc\x7e\xf0\x17\xf4\xef\x00\x00\x00\xff\xff\xcb\xec\xb9\x58\x10\x11\x00\x00")

func deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYaml,
		"deploy/olm-catalog/istio-workspace/manifests/istio-workspace.clusterserviceversion.yaml",
	)
}

func deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYaml() (*asset, error) {
	bytes, err := deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/olm-catalog/istio-workspace/manifests/istio-workspace.clusterserviceversion.yaml", size: 4368, mode: os.FileMode(420), modTime: time.Unix(1593769352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\xc1\x8e\xe3\x36\x0f\xbe\xe7\x29\x08\xfc\x87\xbd\xfc\x49\x30\xe8\xa5\xf0\x6d\x31\xed\x61\xd0\x6d\x31\x98\x14\x7b\x67\x2c\xda\x61\xd7\x96\x54\x89\xca\x36\x2d\xfa\xee\x85\x24\x3b\x71\x1c\x3b\x99\xcc\x62\x81\x62\xcb\x5b\x28\x8a\xa4\xbe\x8f\xa4\x14\xa3\xe5\x8f\xe4\x3c\x1b\x5d\x00\x5a\xa6\x3f\x84\x74\xfc\xe5\x57\x9f\xbe\xf7\x2b\x36\xeb\xfd\xc3\x96\x04\x1f\x16\x9f\x58\xab\x02\x1e\x83\x17\xd3\xbe\x90\x37\xc1\x95\xf4\x03\x55\xac\x59\xd8\xe8\x45\x4b\x82\x0a\x05\x8b\x05\x80\xc6\x96\x0a\xf0\xe4\xb3\xa3\x16\xd9\x8b\xc3\x15\x9b\x85\xb7\x54\x46\x8b\xda\x99\x60\x0b\x18\xac\xe4\x5d\x3e\x2e\x02\xe4\x58\x9b\xec\x20\x69\x1a\xf6\xf2\xd3\x50\xfb\x81\xbd\xa4\x15\xdb\x04\x87\xcd\x29\x5c\x52\x7a\xd6\x75\x68\xd0\x1d\xd5\x0b\x00\x5f\x1a\x4b\x05\xfc\x12\xc3\x58\x2c\x49\x45\x5d\xd8\xba\xee\x2c\x5d\x68\x2f\x28\xc1\x17\xf0\xd7\xdf\x0b\x80\x3d\x36\xac\x30\x9e\x2f\x2f\x1a\x4b\xfa\xfd\xf3\xd3\xc7\xef\x36\xe5\x8e\x5a\xcc\x4a\x00\x45\xbe\x74\x6c\x93\x5d\x9f\x1f\xb0\x07\xd9\x11\x64\x4b\xa8\x8c\x4b\x3f\xfb\x2c\xe1\xfd\xf3\xd3\xaa\xdb\x6e\x9d\xb1\xe4\x84\xfb\x14\xa2\x0c\x68\x39\xea\x46\x81\xde\xc5\x4c\xb2\x0d\xa8\x48\x04\xe5\x88\xfb\xac\x23\x05\x3e\xc7\x36\x15\xc8\x8e\x3d\x38\xb2\x8e\x3c\x69\x49\x27\x1a\xb8\x85\x68\x82\x1a\xcc\xf6\x37\x2a\x65\x05\x1b\x72\xd1\x09\xf8\x9d\x09\x8d\x82\xd2\xe8\x3d\x39\x01\x47\xa5\xa9\x35\xff\x79\xf4\xec\x41\x4c\x0a\xd9\xa0\x50\x47\x47\x2f\xac\x85\x9c\xc6\x26\x62\x18\xe8\xff\x80\x5a\x41\x8b\x07\x70\x14\x63\x40\xd0\x03\x6f\xc9\xc4\xaf\xe0\x67\xe3\x08\x58\x57\xa6\x80\x9d\x88\xf5\xc5\x7a\x5d\xb3\xf4\x85\x58\x9a\xb6\x0d\x9a\xe5\xb0\x2e\x8d\x16\xc7\xdb\x20\xc6\xf9\xb5\xa2\x3d\x35\x6b\xcf\xf5\x12\x5d\xb9\x63\xa1\x52\x82\xa3\x35\x5a\x5e\xa6\xc4\xb5\xe4\x22\x54\xff\x3b\x32\xfd\x6e\x90\xa9\x1c\x62\x51\x78\x71\xac\xeb\xa3\x3a\xd5\xdf\x2c\xee\xb1\x0e\x23\xbd\xd8\x6d\xcb\xf9\x9f\xe0\x8d\xaa\x88\xca\xcb\x8f\x9b\x5f\xa1\x0f\x9a\x28\x38\xc7\x3c\xa1\x7d\xda\xe6\x4f\xc0\x47\xa0\x58\x57\xe4\x32\x71\x95\x33\x6d\xf2\x48\x5a\x59\xc3\x5a\xd2\x8f\xb2\x61\xd2\xe7\xa0\xfb\xb0\x6d\x59\x22\xd3\xbf\x07\xf2\x12\xf9\x59\xc1\x23\x6a\x6d\x04\xb6\x04\xc1\x2a\x14\x52\x2b\x78\xd2\xf0\x88\x2d\x35\x8f\xe8\xe9\xab\xc3\x1e\x11\xf6\xcb\x08\xe9\x6d\xe0\x87\x53\xe4\xdc\x30\xa3\x75\x54\xf7\x83\x64\x92\xa1\xae\x05\x37\x96\xca\xb3\xce\x50\xe4\xd9\xc5\xea\x15\x14\x8a\x35\xdf\x19\xae\x06\x8e\xa6\x9a\x31\x8a\xa3\xea\x5c\x01\xc0\x42\xad\x1f\x2b\x47\xa9\xbc\x50\x75\x25\x85\x38\x15\x30\x0d\xab\x26\xd6\x4f\x45\x8e\x74\x49\x17\x1e\x01\x3e\xb3\xec\x58\xe7\x81\x72\x99\xf3\xf5\xcc\xb3\xa0\xab\x27\xf5\x00\xa8\x54\x1a\xe1\xd8\x3c\x5f\xf5\x00\x73\xa4\x5d\x1a\x8c\xc8\x3a\x49\xba\x19\xae\x6c\x9c\xf5\x1c\xaf\x09\xa1\xfa\xf0\x86\xcd\x57\x52\xca\x4b\xe8\x1c\x1e\xce\xc9\x36\x41\x2e\xf2\x3c\xe7\x35\x5a\x9c\x31\xdb\x67\x98\x48\xdd\x99\xcf\x49\x29\x0e\xab\x8a\xcb\x38\x2d\x92\x4f\x75\x99\x5d\x9e\xa0\x2f\x54\x8d\x19\xbd\xc6\xe7\x1c\x8e\xb7\x81\xb8\x77\x53\x9a\x6d\x77\xee\x9a\x41\x7c\xba\x91\xf3\x7d\x7b\xab\x95\x93\xd5\x19\xde\x66\xeb\xe3\xb4\x7c\x73\x37\x5f\xa0\xfa\xca\x76\x7e\x55\x2a\x51\xcb\x5a\xf1\x9e\x55\xc0\x66\x02\xbd\x09\xbe\xbf\xf1\x0e\x1e\xbd\xb3\xc6\x32\x83\x7e\x96\x31\x07\xfd\xfb\x73\x9a\x85\x63\x24\x68\x43\x24\x44\xad\x4b\x47\x38\xd5\x7c\xbd\xa0\x07\x8b\x4e\x7a\xe6\x26\xc9\xc9\x72\x9d\xa2\xce\x5b\x29\xa3\x77\xdb\x58\x6e\x92\x00\x13\x8f\x90\x37\x39\x99\xa7\xeb\x0e\x27\xf1\xd0\xd7\x9c\xdc\x53\x7f\x77\x84\xbd\x59\x8b\xaf\x32\x99\x9b\xf1\x59\xbe\xe0\x5e\x01\x10\x74\x35\xc9\x17\x17\xf4\x07\xdc\x52\x43\x6a\x58\xd7\xe9\x75\x39\x54\xc4\x07\x40\x36\xf4\xdf\x4a\x69\x36\xe9\x34\xff\xd6\xba\xfa\x0f\xb4\x4e\xfc\x97\x10\x1f\xa3\x73\xf1\x96\x1d\x45\x5f\xa3\xf3\xde\xf0\x28\x4b\x97\xeb\x38\xd7\x19\x34\x26\xdc\x8f\x54\xfb\xfe\xa3\xc7\xfe\x01\x1b\xbb\xc3\x87\x93\x2e\x11\xb0\xec\xbe\x62\x0c\x96\x01\xf2\x05\x53\x80\xb8\x40\xdd\xd7\x02\xe3\xb0\xa6\x4e\xf3\x4f\x00\x00\x00\xff\xff\xb8\x1e\x54\xf0\x4c\x11\x00\x00")

func deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYaml,
		"deploy/olm-catalog/istio-workspace/manifests/maistra.io_sessions_crd.yaml",
	)
}

func deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYaml() (*asset, error) {
	bytes, err := deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/olm-catalog/istio-workspace/manifests/maistra.io_sessions_crd.yaml", size: 4428, mode: os.FileMode(420), modTime: time.Unix(1593769352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployRole_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x31\x6f\x1b\x31\x0c\x85\xf7\xfb\x15\x84\xd1\xd5\x57\x74\x2b\xb4\xb9\x85\xd1\xa9\x45\x61\x1b\xd9\x79\x12\xcf\xc7\xf8\x4e\x54\x28\xca\x06\x12\xe4\xbf\x07\x96\xcf\x71\x90\xc1\xd1\x26\x3e\xe2\xbd\xf7\xf1\xc0\x31\x38\xd8\xd1\x94\x46\x34\x6a\x30\xf1\x03\x69\x66\x89\x0e\x6c\x1e\xb6\x92\x28\xe6\x81\x7b\x6b\x59\xbe\x1f\x7f\x34\x09\x15\x27\x32\xd2\xec\x1a\x80\x25\x44\x9c\xc8\xc1\xbf\xd5\xdf\xf5\xf6\xff\xea\xf7\xba\x01\x00\x08\x94\xbd\x72\xb2\xea\xb4\xd8\xa1\xee\xc9\xea\x62\x4e\xe8\x09\x7a\x51\x38\x0d\xec\x07\x50\x19\x09\x3a\x8e\x81\xe3\x1e\xf2\x20\x65\x0c\xd0\x11\x04\xea\x39\x52\x58\x54\x33\xa5\xa7\xc2\x4a\xc1\x81\x69\xa1\x3a\x3a\xe2\x58\xc8\x01\x67\x63\x59\x9e\x44\x0f\xd5\x77\x29\x89\x14\x4d\xb4\x91\xee\x91\xbc\xcd\x05\x2f\x90\x1b\x19\xe9\xd7\x25\xa8\x5a\x7c\x64\xd5\x0e\x7d\x8b\xc5\x06\x51\x7e\xc6\x73\xeb\xf6\xf0\x33\xcf\xbc\xe7\xe5\x89\x0c\x03\x1a\xba\xfa\x83\x99\xf9\x53\x7c\xd5\x72\xb9\x45\x9f\xdf\x35\x7e\x4b\x7a\x64\x4f\x2b\xef\xa5\x44\x9b\xc5\x7b\x46\x57\xb5\x4e\x1c\x7c\x7b\x79\xbf\xf0\xeb\xe5\x2a\x32\xd2\x86\xfa\x6b\xce\x0d\xf2\xcb\x8a\x95\xfd\x8f\x4a\x49\x77\xc8\x9b\xb7\x00\x00\x00\xff\xff\x0b\xb5\x61\x6a\x1b\x02\x00\x00")

func deployRole_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployRole_bindingYaml,
		"deploy/role_binding.yaml",
	)
}

func deployRole_bindingYaml() (*asset, error) {
	bytes, err := deployRole_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/role_binding.yaml", size: 539, mode: os.FileMode(436), modTime: time.Unix(1568823866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _deployCluster_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6f\xdb\x30\x0c\x85\xef\xfe\x15\x44\xb0\x6b\x3c\xec\x36\xe8\x96\x05\xc1\x4e\x1b\x86\x24\xd8\x9d\x96\xe8\x98\x8b\x2d\x6a\x14\x95\x00\x2d\xfa\xdf\x8b\x28\x4e\x5b\xb4\x40\xaa\x9b\xf8\x88\xc7\xef\xbd\x23\xc7\xe0\x60\x4f\x53\x1a\xd1\xa8\xc1\xc4\x7f\x49\x33\x4b\x74\x60\xf3\xb0\x95\x44\x31\x0f\xdc\x5b\xcb\xf2\xf5\xf4\xad\x49\xa8\x38\x91\x91\x66\xd7\x00\x2c\x21\xe2\x44\x0e\x7e\xaf\x7e\x6d\x76\x7f\x56\xeb\x4d\x03\x00\x10\x28\x7b\xe5\x64\xd5\x69\xb1\x47\x3d\x90\xd5\xc5\x9c\xd0\x13\xf4\xa2\x70\x1e\xd8\x0f\xa0\x32\x12\x74\x1c\x03\xc7\x03\xe4\x41\xca\x18\xa0\x23\x08\xd4\x73\xa4\xb0\xa8\x66\x4a\xff\x0b\x2b\x05\x07\xa6\x85\xea\xe8\x84\x63\x21\x07\x9c\x8d\x65\x79\x16\x3d\x56\xdf\xa5\x24\x52\x34\xd1\x46\xba\x7f\xe4\x6d\x06\xbc\x86\x5c\x8f\x25\x1b\xe9\x56\x46\xfa\x71\xbd\x57\x9d\xde\x46\xd6\x0e\x7d\x8b\xc5\x06\x51\x7e\xc0\x0b\x7c\x7b\xfc\x9e\xe7\xd8\x97\xe5\x89\x0c\x03\x1a\xba\xfa\x83\x39\xfa\x3b\x8a\xaa\xe5\xf2\x4a\x70\x79\x37\x8a\x1d\xe9\x89\x3d\xad\xbc\x97\x12\x6d\x16\xef\x19\xdd\xd4\x3a\x71\xf0\xe5\xf1\xa5\xe8\xa7\x6b\x39\x32\xd2\x96\xfa\xdb\x9d\x0f\x59\x3f\x25\xad\x15\xfc\x54\x29\xe9\x4e\x01\xcd\x73\x00\x00\x00\xff\xff\x5a\x3b\x0c\xba\x29\x02\x00\x00")

func deployCluster_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployCluster_role_bindingYaml,
		"deploy/cluster_role_binding.yaml",
	)
}

func deployCluster_role_bindingYaml() (*asset, error) {
	bytes, err := deployCluster_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/cluster_role_binding.yaml", size: 553, mode: os.FileMode(436), modTime: time.Unix(1568823862, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/cluster_role.yaml":                                                                deployCluster_roleYaml,
	"deploy/service_account.yaml":                                                             deployService_accountYaml,
	"deploy/operator.yaml":                                                                    deployOperatorYaml,
	"deploy/operator.tpl.yaml":                                                                deployOperatorTplYaml,
	"deploy/role.yaml":                                                                        deployRoleYaml,
	"deploy/crds/maistra.io_sessions_crd.yaml":                                                deployCrdsMaistraIo_sessions_crdYaml,
	"deploy/crds/maistra.io_sessions_cr.yaml":                                                 deployCrdsMaistraIo_sessions_crYaml,
	"deploy/examples/bookinfo/session_role.yaml":                                              deployExamplesBookinfoSession_roleYaml,
	"deploy/examples/bookinfo/session_rolebinding.yaml":                                       deployExamplesBookinfoSession_rolebindingYaml,
	"deploy/olm-catalog/istio-workspace/manifests/istio-workspace.clusterserviceversion.yaml": deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYaml,
	"deploy/olm-catalog/istio-workspace/manifests/maistra.io_sessions_crd.yaml":               deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYaml,
	"deploy/role_binding.yaml":                                                                deployRole_bindingYaml,
	"deploy/cluster_role_binding.yaml":                                                        deployCluster_role_bindingYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"cluster_role.yaml":         &bintree{deployCluster_roleYaml, map[string]*bintree{}},
		"cluster_role_binding.yaml": &bintree{deployCluster_role_bindingYaml, map[string]*bintree{}},
		"crds": &bintree{nil, map[string]*bintree{
			"maistra.io_sessions_cr.yaml":  &bintree{deployCrdsMaistraIo_sessions_crYaml, map[string]*bintree{}},
			"maistra.io_sessions_crd.yaml": &bintree{deployCrdsMaistraIo_sessions_crdYaml, map[string]*bintree{}},
		}},
		"examples": &bintree{nil, map[string]*bintree{
			"bookinfo": &bintree{nil, map[string]*bintree{
				"session_role.yaml":        &bintree{deployExamplesBookinfoSession_roleYaml, map[string]*bintree{}},
				"session_rolebinding.yaml": &bintree{deployExamplesBookinfoSession_rolebindingYaml, map[string]*bintree{}},
			}},
		}},
		"olm-catalog": &bintree{nil, map[string]*bintree{
			"istio-workspace": &bintree{nil, map[string]*bintree{
				"manifests": &bintree{nil, map[string]*bintree{
					"istio-workspace.clusterserviceversion.yaml": &bintree{deployOlmCatalogIstioWorkspaceManifestsIstioWorkspaceClusterserviceversionYaml, map[string]*bintree{}},
					"maistra.io_sessions_crd.yaml":               &bintree{deployOlmCatalogIstioWorkspaceManifestsMaistraIo_sessions_crdYaml, map[string]*bintree{}},
				}},
			}},
		}},
		"operator.tpl.yaml":    &bintree{deployOperatorTplYaml, map[string]*bintree{}},
		"operator.yaml":        &bintree{deployOperatorYaml, map[string]*bintree{}},
		"role.yaml":            &bintree{deployRoleYaml, map[string]*bintree{}},
		"role_binding.yaml":    &bintree{deployRole_bindingYaml, map[string]*bintree{}},
		"service_account.yaml": &bintree{deployService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
