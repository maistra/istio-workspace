defaults:
  golang-install: &golang-install
    name: "Install latest Golang"
    command: |
      sudo rm -rf /usr/local/go
      sudo circleci-install golang 1.15
  docker:
    - image: &golang-img circleci/golang:1.15
  machine-conf: &machine-conf
    image: ubuntu-1604:201903-01
  skip-e2e-check: &skip-e2e-check
    name: "Check for /skip-e2e directive"
    command: |
      COMMIT_MSG=$(git log --format=%B -n 1 $CIRCLE_SHA1)
      if [[ $COMMIT_MSG == *"/skip-e2e"* ]]; then
        echo "/skip-e2e directive detected. Explictly stopping e2e tests."
        circleci step halt
      fi
  env-vars: &env-vars
    GOPATH: /home/circleci/.go_workspace
    IKE_E2E_KEEP_NS: "false"
    IKE_E2E_MANAGE_CLUSTER: "false"
    IKE_LOG_DEBUG: "true"

version: 2.1
jobs:

  ## Regular build running tests
  build:
    working_directory: /go/src/github.com/maistra/istio-workspace
    docker:
      - image: *golang-img
    steps:
      - checkout
      - run:
          name: "Obtain git tree hash"
          command: |
            git rev-parse HEAD: > /tmp/build.githash
      - restore_cache:
          keys:
            - golang-deps-cache-{{ checksum "Gopkg.lock" }}
      - restore_cache:
          keys:
            - build-cache-{{ checksum "/tmp/build.githash" }}
      - run:
          name: "Check if build with this content was already executed"
          command: |
            if [[ -f build.githash ]]; then
              echo "This exact code base has been successfully built"
              circleci step halt
            else
              echo "New build - if suceeds build git hash will be cached"
              cp /tmp/build.githash build.githash
            fi
      - run:
          name: "Run the build"
          command: make build-ci
      - save_cache:
          key: golang-deps-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - save_cache:
          key: build-cache-{{ checksum "build.githash" }}
          paths:
            - ./build.githash

  ## End-to-end testing involving OpenShift cluster with Istio (Maistra disitribution) running remotely
  e2e_tests_remote_openshift_4:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          name: "Obtain git tree hash"
          command: |
            git rev-parse HEAD: > /tmp/e2e-openshift-4.githash
      - restore_cache:
          keys:
            - e2e-cache-{{ checksum "/tmp/e2e-openshift-4.githash" }}
      - run:
          name: "Check if build with this content was already executed"
          command: |
            if [[ -f e2e-openshift-4.githash ]]; then
              echo "This exact code base has been successfully built"
              circleci step halt
            else
              echo "New build - if suceeds build git hash will be cached"
              cp /tmp/e2e-openshift-4.githash e2e-openshift-4.githash
            fi

      - run:
          <<: *skip-e2e-check
      - run:
          <<: *golang-install
      - run:
          name: "Install telepresence"
          command: |
            cd ~
            pyenv global 3.5.2
            curl -s https://packagecloud.io/install/repositories/datawireio/telepresence/script.deb.sh | sudo bash
            sudo apt install --no-install-recommends telepresence
            telepresence --version
      - run:
          name: "Configure Docker daemon with insecure-registry"
          command: |
            json=`mktemp`
            echo '{ "insecure-registries": [ "172.30.0.0/16", "registry.access.redhat.com", "docker-registry-default.127.0.0.1.nip.io:80", "default-route-openshift-image-registry.apps.yuaxu-maistra-daily.devcluster.openshift.com"] }' > ${json}
            sudo mv ${json} /etc/docker/daemon.json
            sudo service docker restart
            echo "Configured Docker daemon with insecure-registry"
      - run:
          name: "Install Openshift and k8s client tools"
          command: |
            cd ~
            wget "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.5.5/openshift-client-linux-4.5.5.tar.gz" -O "oc.tar.gz"
            tar xzfv oc.tar.gz
            sudo mv $PWD/oc /usr/local/bin/
            echo "Installed oc\n$(oc version)\n"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            echo "Installed kubectl\n$(kubectl version)\n"
      - restore_cache:
          keys:
            - golang-deps-e2e-cache-{{ checksum "Gopkg.lock" }}
      - run:
          name: "Run end-to-end tests"
          command: |
            oc login $QE_CLUSTER_ADDRESS -u $QE_IKE_CLUSTER_USER -p $QE_IKE_CLUSTER_PWD --insecure-skip-tls-verify=true
            IKE_CLUSTER_USER=$QE_IKE_CLUSTER_USER \
            IKE_CLUSTER_PWD=$QE_IKE_CLUSTER_PWD \
            IKE_CLUSTER_HOST=$QE_IKE_CLUSTER_HOST \
            ISTIO_NS=$QE_ISTIO_NS \
            IKE_CLUSTER_ADDRESS=$QE_CLUSTER_ADDRESS \
            make deps test-e2e
      - save_cache:
          key: golang-deps-e2e-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - save_cache:
          key: e2e-cache-{{ checksum "e2e-openshift-4.githash" }}
          paths:
            - ./e2e-openshift-4.githash

  ## End-to-end testing using single-node microk8s cluster
  e2e_tests_microk8s:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          name: "Obtain git tree hash"
          command: |
            git rev-parse HEAD: > /tmp/e2e-microk8s.githash
      - restore_cache:
          keys:
            - e2e-cache-{{ checksum "/tmp/e2e-microk8s.githash" }}
      - run:
          name: "Check if build with this content was already executed"
          command: |
            if [[ -f e2e-microk8s.githash ]]; then
              echo "This exact code base has been successfully built"
              circleci step halt
            else
              echo "New build - if suceeds build git hash will be cached"
              cp /tmp/e2e-microk8s.githash e2e-microk8s.githash
            fi

      - run:
          <<: *skip-e2e-check
      - run:
          <<: *golang-install
      - run:
          name: "Install telepresence"
          command: |
            cd ~
            pyenv global 3.5.2
            curl -s https://packagecloud.io/install/repositories/datawireio/telepresence/script.deb.sh | sudo bash
            sudo apt install --no-install-recommends telepresence
            telepresence --version
      - run:
          name: "Configure Docker daemon with insecure-registry"
          command: |
            json=`mktemp`
            echo '{ "insecure-registries": [ "localhost:32000"] }' > ${json}
            sudo mv ${json} /etc/docker/daemon.json
            sudo service docker restart
            echo "Configured Docker daemon with insecure-registry"
      - run:
          name: Install official kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.0-rc.4/bin/linux/amd64/kubectl
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            echo "Installed kubectl\n$(kubectl version)\n"
      - run:
          name: Launch Microk8s
          command: |
            sudo snap install microk8s --classic --channel 1.19/candidate

            sudo microk8s.kubectl config view --raw > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig

            # wait until a k8s node is ready
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get no | grep -z "Ready") && break
              n=$[$n+1]
              sleep 20
            done
            echo "Kubernetes cluster launched"

            # Allow intra-pod communication
            sudo iptables -P FORWARD ACCEPT

            echo n | sudo microk8s.enable dns registry istio

            # wait until the registry is up and running
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get pod --namespace=container-registry | grep -z "Running") && break
              n=$[$n+1]
              sleep 10
            done
            echo "Kubernetes Container Registry enabled"

            # wait until istio is up and running
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get pod -l istio=sidecar-injector --namespace=istio-system | grep -z "Running") && break
              n=$[$n+1]
              sleep 10
            done
            echo "Istio enabled"


      - restore_cache:
          keys:
            - golang-deps-e2e-cache-{{ checksum "Gopkg.lock" }}
      - run:
          name: "Run end-to-end tests"
          command: |
            sudo microk8s.kubectl config view --raw > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig
            IKE_CLUSTER_HOST=localhost \
            IKE_ISTIO_INGRESS=http://localhost:31380 \
            IKE_INTERNAL_DOCKER_REGISTRY=localhost:32000 \
            IKE_EXTERNAL_DOCKER_REGISTRY=localhost:32000 \
            make deps test-e2e
      - save_cache:
          key: golang-deps-e2e-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - ./vendor
      - save_cache:
          key: e2e-cache-{{ checksum "e2e-microk8s.githash" }}
          paths:
            - ./e2e-microk8s.githash

  release:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          name: "Installs release tools prerequisites"
          command: |
            cd ~
            gem install asciidoctor
            wget "https://github.com/jgm/pandoc/releases/download/2.9/pandoc-2.9-linux-amd64.tar.gz" -O "pandoc.tar.gz"
            tar xzfv pandoc.tar.gz
            sudo mv $PWD/pandoc-2.9/bin/pandoc /usr/local/bin/
      - run:
          <<: *golang-install
      - run:
          name: "Sets up Quay.io"
          command: |
            mkdir -p ~/.docker && chmod 0700 ~/.docker
            touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
            echo $QUAY_AUTH_JSON > ~/.docker/config.json
            docker login quay.io
      - run:
          name: "Push it!"
          command: |
            make deps docker-build docker-push-versioned
      - run:
          name: "Release it!"
          command: |
            asciidoctor -b docbook -a leveloffset=+1 -o - docs/modules/ROOT/pages/release_notes/${CIRCLE_TAG}.adoc | pandoc --atx-headers --wrap=preserve -t markdown_strict -f docbook - 1> converted-release-notes.md
            curl -sL https://git.io/goreleaser | bash -s -- release --rm-dist --release-notes=converted-release-notes.md

workflows:
  version: 2.1
  circleci_build:
    jobs:
      - build
  circleci_e2e_tests:
    jobs:
      - e2e_tests_microk8s
      - e2e_tests_remote_openshift_4
  circleci_release:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
