version: 2.1

defaults:
  golang-install: &golang-install
    name: "Install latest Golang"
    command: |
      sudo snap install go --classic --channel 1.15/stable
  node-install: &node-install
    name: "Install Node"
    command: |
      nvm install 10
      nvm use 10
  docker:
    - image: &golang-img cimg/go:1.15.8
  machine-conf: &machine-conf
    image: ubuntu-2004:202101-01
  skip-e2e-check: &skip-e2e-check
    name: "Check for /skip-e2e directive"
    command: |
      COMMIT_MSG=$(git log --format=%B -n 1 $CIRCLE_SHA1)
      if [[ $COMMIT_MSG == *"/skip-e2e"* ]]; then
        echo "/skip-e2e directive detected. Explictly stopping e2e tests."
        circleci step halt
      fi
  obtain-tree-hash: &obtain-tree-hash
    name: "Obtain git tree hash"
    command: |
      mkdir -p ${BUILD_CACHE_FOLDER}
      export TREE_SHA1=$(git rev-parse HEAD:)
      echo "export TREE_SHA1=${TREE_SHA1}" >> $BASH_ENV
      echo ${TREE_SHA1} > /tmp/tree.sha1
  restore-tree-hash: &restore-tree-hash
      keys:
        - job-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "/tmp/tree.sha1" }} # workaround for https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/20
  check-if-build-executed: &check-if-build-executed
    name: "Check if build with this content was already executed"
    command: |
      if [[ -f ${BUILD_CACHE_FOLDER}/${CIRCLE_JOB}.githash ]]; then
        echo "This exact code base has been successfully built"
        circleci step halt
      else
        echo "New build - if succeeds build git hash will be cached"
        echo "${TREE_SHA1}" > ${BUILD_CACHE_FOLDER}/${CIRCLE_JOB}.githash
      fi
  save-tree-hash: &save-tree-hash
    key: job-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "/tmp/tree.sha1" }}
    paths:
      - ./.circleci/cache # Can't use env variable here - needs to be explicit value
  env-vars: &env-vars
    GOPATH: /home/circleci/.go_workspace
    IKE_E2E_KEEP_NS: "false"
    IKE_E2E_MANAGE_CLUSTER: "false"
    IKE_LOG_DEBUG: "true"
    BUILD_CACHE_FOLDER: ".circleci/cache"

jobs:

  ## Regular build running tests
  build:
    docker:
      - image: *golang-img
    environment:
      BUILD_CACHE_FOLDER: ".circleci/cache"
    steps:
      - checkout
      - run:
          << : *obtain-tree-hash
      - restore_cache:
          << : *restore-tree-hash
      - run:
          << : *check-if-build-executed
      - restore_cache:
          keys:
            - golang-deps-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "go.sum" }}
      - run:
          name: "Run the build"
          command: make build-ci
      - save_cache:
          key: golang-deps-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - save_cache:
          << : *save-tree-hash

  ## End-to-end testing using single-node microk8s cluster
  e2e_tests_microk8s:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - restore_cache:
          keys:
            - golang-deps-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "go.sum" }}
      - run:
          <<: *obtain-tree-hash
      - restore_cache:
          <<: *restore-tree-hash
      - run:
          <<: *check-if-build-executed
      - run:
          <<: *skip-e2e-check
      - run:
          <<: *golang-install
      - run:
          name: "Install telepresence"
          command: |
            cd ~
            pyenv global 3.9.1
            curl -s https://packagecloud.io/install/repositories/datawireio/telepresence/script.deb.sh | sudo bash
            sudo apt install --no-install-recommends telepresence
            telepresence --version
      - run:
          name: "Sets up Quay.io"
          command: |
            mkdir -p ~/.docker && chmod 0700 ~/.docker
            touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
            echo $QUAY_AUTH_JSON > ~/.docker/config.json
            docker login quay.io
      - run:
          name: Install official kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.20.2/bin/linux/amd64/kubectl
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            echo "Installed kubectl\n$(kubectl version)\n"
      - run:
          name: Launch Microk8s
          command: |
            sudo snap install microk8s --classic --channel 1.18/stable

            sudo microk8s.kubectl config view --raw > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig

            # wait until a k8s node is ready
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get no | grep -z "Ready") && break
              n=$[$n+1]
              sleep 20
            done
            echo "Kubernetes cluster launched"

            # Allow intra-pod communication
            sudo iptables -P FORWARD ACCEPT

            echo n | sudo microk8s.enable dns registry istio rbac

            # wait until the registry is up and running
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get pod --namespace=container-registry | grep -z "Running") && break
              n=$[$n+1]
              sleep 10
            done
            echo "Kubernetes Container Registry enabled"

            # wait until istio is up and running
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get pod -l istio=sidecar-injector --namespace=istio-system | grep -z "Running") && break
              n=$[$n+1]
              sleep 10
            done
            echo "Istio enabled"
      - run:
          name: "Run end-to-end tests"
          command: |
            sudo microk8s.kubectl config view --raw > /tmp/kubeconfig

            export KUBECONFIG=/tmp/kubeconfig \
              IKE_CLUSTER_HOST=localhost \
              IKE_ISTIO_INGRESS=http://localhost:31380 \
              PRE_BUILT_IMAGES=true \
              IKE_INTERNAL_DOCKER_REGISTRY=quay.io \
              IKE_EXTERNAL_DOCKER_REGISTRY=quay.io \
              IKE_DOCKER_REPOSITORY=maistra-dev

            if [ -z ${CIRCLE_PULL_REQUEST+x} ]; then
              export IKE_IMAGE_TAG="${CIRCLE_BRANCH##*/}"
            else
              export IKE_IMAGE_TAG="pr-${CIRCLE_PULL_REQUEST##*/}-circle"
            fi

            make deps tools

            ./bin/operator-sdk olm install

            make docker-build docker-push-versioned
            make docker-build-test docker-push-test
            IKE_TEST_PREPARED_NAME="prepared-image" make docker-build-test-prepared docker-push-test-prepared
            IKE_TEST_PREPARED_NAME="image-prepared" make docker-build-test-prepared docker-push-test-prepared
            make bundle bundle-build bundle-push

            make test-e2e
      - save_cache:
          key: golang-deps-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - save_cache:
          <<: *save-tree-hash

  release:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          <<: *golang-install
      - run:
          <<: *node-install
      - run:
          name: "Install release tools prerequisites"
          command: |
            nvm use 10
            npm i -g asciidoctor @asciidoctor/core @asciidoctor/docbook-converter

            export PANDOC_VERSION=2.11.4
            cd ~
            wget "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-amd64.tar.gz" -O "pandoc.tar.gz"
            tar xzfv pandoc.tar.gz
            sudo mv $PWD/pandoc-${PANDOC_VERSION}/bin/pandoc /usr/local/bin/
      - run:
          name: "Sets up Quay.io"
          command: |
            mkdir -p ~/.docker && chmod 0700 ~/.docker
            touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
            echo $QUAY_AUTH_JSON > ~/.docker/config.json
            docker login quay.io
      - run:
          name: "Sets up Git credentials"
          command: |
            git config --global user.name "${GIT_USER}"
            git config --global user.email "${GIT_EMAIL}"
      - run:
          name: "Configures PGP for signing commits in Git"
          command: |
            export GPG_PROGRAM="/usr/bin/gpg-passphrase"
            sudo touch "${GPG_PROGRAM}"
            sudo chown $(whoami) "${GPG_PROGRAM}"

            chmod +x "${GPG_PROGRAM}"
            echo '/usr/bin/gpg --passphrase "${PGP_PASSPHRASE}"  --pinentry-mode loopback --batch --no-tty "$@"' > "${GPG_PROGRAM}"

            echo -e $PGP_KEY | gpg --import --pinentry-mode loopback --batch --no-tty
            git config --global user.signingkey "${PGP_KEYID}"
            git config --global gpg.program "${GPG_PROGRAM}"
      - run:
          <<: *obtain-tree-hash
      - restore_cache:
          <<: *restore-tree-hash
      - run:
          name: "Release images!"
          command: |
            make deps tools docker-build docker-push-versioned bundle bundle-build bundle-push
      - run:
          name: "Release client!"
          command: |
            if [[ -f ${BUILD_CACHE_FOLDER}/release-client.githash ]]; then
              echo "This exact code base has been successfully pushed"
            else
              echo "New build - if succeeds subsequent run will be skipped."

              nvm use 10
              asciidoctor --require @asciidoctor/docbook-converter -a leveloffset=+1 --backend docbook  -o - docs/modules/ROOT/pages/release_notes/${CIRCLE_TAG}.adoc |  pandoc --wrap=preserve --from docbook --to gfm - 1> converted-release-notes.md
              curl -sL https://git.io/goreleaser | bash -s -- release ${GORELEASER_OPTS} --rm-dist --release-notes=converted-release-notes.md

              echo "${TREE_SHA1}" > ${BUILD_CACHE_FOLDER}/release-client.githash
            fi
      - run:
          name: "Publish Operator Hub Catalog!"
          command: |
            if [[ -f ${BUILD_CACHE_FOLDER}/operatorhub.githash ]]; then
              echo "This exact code base has been successfully pushed"
            else
              echo "New build - if succeeds subsequent run will be skipped."

              OPERATOR_HUB="upstream-community-operators" make bundle-publish
              OPERATOR_HUB="community-operators" make bundle-publish

              echo "${TREE_SHA1}" > ${BUILD_CACHE_FOLDER}/operatorhub.githash
            fi
      - run:
          name: "Publish Tekton Hub Catalog!"
          command: |
            if [[ -f ${BUILD_CACHE_FOLDER}/tektonhub.githash ]]; then
              echo "This exact code base has been successfully pushed"
            else
              echo "New build - if succeeds subsequent run will be skipped."

              nvm use 10
              make tekton-publish

              echo "${TREE_SHA1}" > ${BUILD_CACHE_FOLDER}/tektonhub.githash
            fi
      - save_cache:
          <<: *save-tree-hash
          when: always

workflows:
  version: 2.1
  circleci_build:
    jobs:
      - build
  circleci_e2e_tests:
    jobs:
      - e2e_tests_microk8s
  circleci_release:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
