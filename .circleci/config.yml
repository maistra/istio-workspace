defaults:
  golang-install: &golang-install
    name: "Install latest Golang"
    command: |
      sudo rm -rf /usr/local/go
      sudo circleci-install golang 1.15.5
  docker:
    - image: &golang-img circleci/golang:1.15.5
  machine-conf: &machine-conf
    image: ubuntu-1604:201903-01
  skip-e2e-check: &skip-e2e-check
    name: "Check for /skip-e2e directive"
    command: |
      COMMIT_MSG=$(git log --format=%B -n 1 $CIRCLE_SHA1)
      if [[ $COMMIT_MSG == *"/skip-e2e"* ]]; then
        echo "/skip-e2e directive detected. Explictly stopping e2e tests."
        circleci step halt
      fi
  obtain-tree-hash: &obtain-tree-hash
    name: "Obtain git tree hash"
    command: |
      echo "export TREE_SHA1=$(git rev-parse HEAD:)" >> $BASH_ENV
      echo ${TREE_SHA1} > /tmp/tree.sha1
  restore-tree-hash: &restore-tree-hash
      keys:
        - job-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "/tmp/tree.sha1" }} # workaround for https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/20
  check-if-build-executed: &check-if-build-executed
    name: "Check if build with this content was already executed"
    command: |
      if [[ -f ${CIRCLE_JOB}.githash ]]; then
        echo "This exact code base has been successfully built"
        circleci step halt
      else
        echo "New build - if succeeds build git hash will be cached"
        echo "${TREE_SHA1}" > ${CIRCLE_JOB}.githash
      fi
  save-tree-hash: &save-tree-hash
    key: job-{{ .Environment.CIRCLE_JOB }}-cache-{{ checksum "/tmp/tree.sha1" }}
    paths:
      - ./${CIRCLE_JOB}.githash
  env-vars: &env-vars
    GOPATH: /home/circleci/.go_workspace
    IKE_E2E_KEEP_NS: "false"
    IKE_E2E_MANAGE_CLUSTER: "false"
    IKE_LOG_DEBUG: "true"

version: 2.1
jobs:

  ## Regular build running tests
  build:
    working_directory: /go/src/github.com/maistra/istio-workspace
    docker:
      - image: *golang-img
    steps:
      - checkout
      - run:
          << : *obtain-tree-hash
      - restore_cache:
          << : *restore-tree-hash
      - run:
          << : *check-if-build-executed
      - restore_cache:
          keys:
            - golang-deps-cache-{{ checksum "go.sum" }}
      - run:
          name: "Run the build"
          command: make build-ci
      - save_cache:
          key: golang-deps-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - save_cache:
          << : *save-tree-hash

  ## Builds container images both of the istio-workspace itself as well as utility ones used for testing purposes
  images:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          <<: *obtain-tree-hash
      - restore_cache:
          <<: *restore-tree-hash
      - run:
          <<: *check-if-build-executed
      - run:
          <<: *skip-e2e-check
      - run:
          <<: *golang-install
      - restore_cache:
          keys:
            - golang-image-deps-cache-{{ checksum "go.sum" }}
      - run:
          name: "Sets up Quay.io"
          command: |
            mkdir -p ~/.docker && chmod 0700 ~/.docker
            touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
            echo $QUAY_AUTH_JSON > ~/.docker/config.json
            docker login quay.io
      - run:
          name: "Push istio-workspace images"
          command: |
            if [ -z ${CIRCLE_PULL_REQUEST+x} ]; then
              export IKE_IMAGE_TAG=latest
            else
              export IKE_IMAGE_TAG="PR-${CIRCLE_PULL_REQUEST##*/}"
            fi
            make deps docker-build docker-push-versioned
            make docker-build-test docker-push-test
            IKE_TEST_PREPARED_NAME="prepared-image" make docker-build-test-prepared docker-push-test-prepared
            IKE_TEST_PREPARED_NAME="image-prepared" make docker-build-test-prepared docker-push-test-prepared
      - save_cache:
          key: golang-image-deps-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - save_cache:
          <<: *save-tree-hash
  ## End-to-end testing using single-node microk8s cluster
  e2e_tests_microk8s:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          <<: *obtain-tree-hash
      - restore_cache:
          <<: *restore-tree-hash
      - run:
          <<: *check-if-build-executed
      - run:
          <<: *skip-e2e-check
      - run:
          <<: *golang-install
      - run:
          name: "Install telepresence"
          command: |
            cd ~
            pyenv global 3.5.2
            curl -s https://packagecloud.io/install/repositories/datawireio/telepresence/script.deb.sh | sudo bash
            sudo apt install --no-install-recommends telepresence
            telepresence --version
      - run:
          name: "Configure Docker daemon with insecure-registry"
          command: |
            json=`mktemp`
            echo '{ "insecure-registries": [ "localhost:32000"] }' > ${json}
            sudo mv ${json} /etc/docker/daemon.json
            sudo service docker restart
            echo "Configured Docker daemon with insecure-registry"
      - run:
          name: Install official kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.9/bin/linux/amd64/kubectl
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            echo "Installed kubectl\n$(kubectl version)\n"
      - run:
          name: Launch Microk8s
          command: |
            sudo snap install microk8s --classic --channel 1.18/stable

            sudo microk8s.kubectl config view --raw > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig

            # wait until a k8s node is ready
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get no | grep -z "Ready") && break
              n=$[$n+1]
              sleep 20
            done
            echo "Kubernetes cluster launched"

            # Allow intra-pod communication
            sudo iptables -P FORWARD ACCEPT

            echo n | sudo microk8s.enable dns registry istio

            # wait until the registry is up and running
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get pod --namespace=container-registry | grep -z "Running") && break
              n=$[$n+1]
              sleep 10
            done
            echo "Kubernetes Container Registry enabled"

            # wait until istio is up and running
            sleep 10
            n=0
            until [ $n -ge 10 ]
            do
              (kubectl get pod -l istio=sidecar-injector --namespace=istio-system | grep -z "Running") && break
              n=$[$n+1]
              sleep 10
            done
            echo "Istio enabled"

      - restore_cache:
          keys:
            - golang-deps-e2e-cache-{{ checksum "go.sum" }}
      - run:
          name: "Run end-to-end tests"
          command: |
            sudo microk8s.kubectl config view --raw > /tmp/kubeconfig
            export KUBECONFIG=/tmp/kubeconfig
            export IKE_CLUSTER_HOST=localhost \
            export IKE_ISTIO_INGRESS=http://localhost:31380 \
            export PRE_BUILT_IMAGES=true \
            export IKE_DOCKER_REPOSITORY=maistra \
            export IKE_EXTERNAL_DOCKER_REGISTRY=quay.io \
            export IKE_INTERNAL_DOCKER_REGISTRY=quay.io
            if [ -z ${CIRCLE_PULL_REQUEST+x} ]; then
              export IKE_IMAGE_TAG=latest
            else
              export IKE_IMAGE_TAG="PR-${CIRCLE_PULL_REQUEST##*/}"
            fi
            make deps tools test-e2e
      - save_cache:
          key: golang-deps-e2e-cache-{{ checksum "go.sum" }}
          paths:
            - ./vendor
      - save_cache:
          <<: *save-tree-hash

  release:
    working_directory: ~/.go_workspace/src/github.com/maistra/istio-workspace
    machine:
      <<: *machine-conf
    environment:
      <<: *env-vars
    steps:
      - checkout
      - run:
          name: "Installs release tools prerequisites"
          command: |
            cd ~
            gem install asciidoctor
            wget "https://github.com/jgm/pandoc/releases/download/2.9/pandoc-2.9-linux-amd64.tar.gz" -O "pandoc.tar.gz"
            tar xzfv pandoc.tar.gz
            sudo mv $PWD/pandoc-2.9/bin/pandoc /usr/local/bin/
      - run:
          <<: *golang-install
      - run:
          name: "Sets up Quay.io"
          command: |
            mkdir -p ~/.docker && chmod 0700 ~/.docker
            touch ~/.docker/config.json && chmod 0600 ~/.docker/config.json
            echo $QUAY_AUTH_JSON > ~/.docker/config.json
            docker login quay.io
      - run:
          name: "Push it!"
          command: |
            make deps docker-build docker-push-versioned
      - run:
          name: "Release it!"
          command: |
            asciidoctor -b docbook -a leveloffset=+1 -o - docs/modules/ROOT/pages/release_notes/${CIRCLE_TAG}.adoc | pandoc --atx-headers --wrap=preserve -t markdown_strict -f docbook - 1> converted-release-notes.md
            curl -sL https://git.io/goreleaser | bash -s -- release --rm-dist --release-notes=converted-release-notes.md

workflows:
  version: 2.1
  circleci_build:
    jobs:
      - build
  circleci_e2e_tests:
    jobs:
      - images
      - e2e_tests_microk8s:
          requires:
            - images
  circleci_release:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
